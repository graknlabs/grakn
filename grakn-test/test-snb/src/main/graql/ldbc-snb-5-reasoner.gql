# Queries:
# match (friend:$x, friend:$y) isa knows-trans;
# match (friend:$x, friend:$y) isa friends-sharing-interest-trans;
# match (trigger:$t, response:$r) isa friends-activity-propagation-trans;

define

#schema extension

knows sub knows-trans;

knows-trans sub relationship
    relates friend;

friends-sharing-interest sub friends-sharing-interest-trans
    relates friend;

friends-sharing-interest-trans sub relationship
    relates friend;

predecessor sub role;
successor sub role;

message-succession sub relationship
    relates predecessor
    relates successor;

trigger sub role;
response sub role;

friends-activity-propagation sub friends-activity-propagation-trans
    relates trigger
    relates response;

friends-activity-propagation-trans sub relationship
    relates trigger
    relates response;

# Queries:
# match (friend:$x, friend:$y) isa knows-trans;
# match (friend:$x, friend:$y) isa friends-sharing-interest-trans;
# match (trigger:$t, response:$r) isa friends-activity-propagation-trans;

#1) Transitive closure of "knows"

rule0 sub rule
when
{
(friend:$x, friend:$y) isa knows-trans;
(friend:$y, friend:$z) isa knows-trans;
}
then
{
(friend:$x, friend:$z) isa knows-trans;
};


#2) Pairs of people connected via paths of friends with pairwise shared interests

rule1 sub rule
when
{
$p1 isa person;
($p1, $p2) isa knows;
(interested:$p1, interest:$i) isa has-interest;
(interested:$p2, interest:$i) isa has-interest;
}
then
{
(friend:$p1, friend:$p2) isa friends-sharing-interest;
};

rule2 sub rule
when
{
(friend:$p1, friend:$p2) isa friends-sharing-interest;
}
then
{
(friend:$p1, friend:$p2) isa friends-sharing-interest-trans;
};

rule3 sub rule
when
{
(friend:$p1, friend:$p2) isa friends-sharing-interest-trans;
(friend:$p2, friend:$p3) isa friends-sharing-interest-trans;
}
then
{
(friend:$p1, friend:$p3) isa friends-sharing-interest-trans;
};


#3) Friendship-based activity propagation on fora

#the following two rules define a temporal order on messeges belonging to the same threads

rule4 sub rule
when
{
$p isa post;
(original:$p, reply:$s) isa reply-of;
}
then
{
(predecessor:$p, successor:$s) isa message-succession;
};


rule5 sub rule
when
{
$p isa post;
(original:$p, reply:$s) isa reply-of;
$s has creation-date $d1;
(original:$p, reply:$r) isa reply-of;
$r has creation-date $d2;
$d1 val < $d2;
}
then
{
(predecessor:$s, successor:$r) isa message-succession;
};

#the following rule marks the ordered pairs of messages that have been created by people knowing each other

rule6 sub rule
when
{
(predecessor:$p, successor:$s) isa message-succession;
(creator:$c1, product:$p) isa has-creator;
(creator:$c2, product:$s) isa has-creator;
($c1, $c2) isa knows;
}
then
{
(trigger:$p, response:$s) isa friends-activity-propagation;
};

#the following two rules compute the transitive closure of the relationship inferred by the previous rule

rule65 sub rule
when
{
(trigger:$p, response:$s) isa friends-activity-propagation;
}
then
{
(trigger:$p, response:$s) isa friends-activity-propagation-trans;
};

rule7 sub rule
when
{
(trigger:$p, response:$s) isa friends-activity-propagation-trans;
(trigger:$s, response:$r) isa friends-activity-propagation-trans;
}
then
{
(trigger:$p, response:$r) isa friends-activity-propagation-trans;
};
