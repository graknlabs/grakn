# annoying path manipulation to allow spreading GRPC/Protobuf files to different subdirectories 
import sys
import os
print("FILE: {0}".format(__file__))
print("realpath: {0}".format(os.path.realpath(__file__)))
print("dirpath: {0}".format(os.path.dirname(os.path.realpath(__file__))))
sess_autogen = os.path.join(os.path.dirname(os.path.realpath(__file__)), os.path.join('service', 'Session', 'autogenerated'))
keyspace_autogen = os.path.join(os.path.dirname(os.path.realpath(__file__)), os.path.join('service', 'Keyspace', 'autogenerated'))
print("sess autogen: {0}".format(sess_autogen))
print("keyspace autogen: {0}".format(keyspace_autogen))
sys.path.append(sess_autogen)
sys.path.append(keyspace_autogen)
#sys.path.append("grakn/service/Keyspace/autogenerated")

import grpc

from grakn.service.Session.util.enums import TxType, DataType
from grakn.service.Keyspace.KeyspaceService import KeyspaceService
from grakn.service.Session.TransactionService import TransactionService
from grakn.service.Session.autogenerated.Session_pb2_grpc import SessionServiceStub

class Grakn(object):

    def __init__(self, uri):
        self.uri = uri
        self.keyspace = KeyspaceService(self.uri, None)

        # shortcuts for user
        self.DataType = DataType
        self.TxType = TxType

    def session(self, keyspace: str):
        return Session(self.uri, keyspace, None)


class Session(object):

    def __init__(self, uri: str, keyspace: str, credentials):

        self.keyspace = keyspace
        self.uri = uri
        self.credentials = credentials

        self._channel = grpc.insecure_channel(uri)
        self._stub = SessionServiceStub(self._channel)

    def transaction(self, tx_type):
        # create a transaction service which hides GRPC usage
        transaction_service = TransactionService(self.keyspace, tx_type, self._stub.transaction)
        return Transaction(transaction_service)

    def close(self):
        self._channel.close()


class Transaction(object):
    """ Presents the Grakn interface to the user, actual work with GRPC happens in TransactionService """

    def __init__(self, transaction_service: TransactionService):
        self._tx_service = transaction_service

    def query(self, query: str):
        return self._tx_service.query(query)

    def commit(self):
        self._tx_service.commit()
        self.close()

    def close(self):
        self._tx_service.close() # close the service

    def get_concept(self, concept_id: str):
        return self._tx_service.get_concept(concept_id)

    def get_schema_concept(self, label: str): 
        return self._tx_service.get_schema_concept(label)

    def get_attributes_by_value(self, attribute_value, data_type):
        return self._tx_service.get_attributes_by_value(attribute_value, data_type)

    def put_entity_type(self, label: str):
        return self._tx_service.put_entity_type(label)

    def put_relationship_type(self, label: str):
        return self._tx_service.put_relationship_type(label)

    def put_attribute_type(self, label: str, data_type):
        return self._tx_service.put_attribute_type(label, data_type)

    def put_role(self, label: str):
        return self._tx_service.put_role(label)

    def put_rule(self, label: str, when: str, then: str):
        return self._tx_service.put_rule(label, when, then)
