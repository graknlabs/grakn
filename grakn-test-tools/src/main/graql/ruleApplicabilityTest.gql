define

#Roles

role1 sub role;
role2 sub role;
role3 sub role;

#Entities

singleRoleEntity sub entity
	plays role1;

twoRoleEntity sub entity
	plays role1
	plays role2;

threeRoleEntity sub entity
    plays role1
    plays role2
    plays role3;

differentTwoRoleEntity sub entity
    plays role2
    plays role3;

noRoleEntity sub entity
    has name;

#Relations

ternary sub relationship
	relates role1
	relates role2
	relates role3;

binary sub relationship
    relates role1
    relates role2;

reified-relationship sub relationship
    relates role1
    relates role2
    plays role1
    plays role2;

reifying-relationship sub relationship
    relates role1
    relates role2;

typed-relation sub relationship
    relates role1
    relates role2
    relates role3;

#Resources
   name sub attribute datatype string;

#Rules

rule-1 sub rule
	when {
		(role1: $x, role2: $y) isa binary;
		(role1: $y, role2: $z) isa binary;
	}
	then {
		(role1:$x, role2:$y, role3: $z) isa ternary;
	};

rule-2 sub rule
	when {
		(role1: $x, role2: $y) isa binary;
		(role1: $y, role2: $z) isa binary;
	}
	then {
		(role1:$x, role2:$y, role2: $z) isa ternary;
	};

rule-3 sub rule
    when {
    	$r1 (role1: $x, role2: $y) isa reified-relationship;
    	$r2 (role1: $y, role2: $z) isa reified-relationship;
    }
    then {
    	(role1:$r1, role2:$r2) isa reifying-relationship;
    };

rule-4 sub rule
    when {
    	$x isa twoRoleEntity;
    	$y isa twoRoleEntity;
    }
    then {
    	(role1:$x, role2:$y) isa reifying-relationship;
    };

rule-5 sub rule
    when {
    	$x isa singleRoleEntity;
    	$y isa twoRoleEntity;
    	$z isa threeRoleEntity;
    }
    then {
    	(role1:$x, role2:$y, role3: $z) isa typed-relation;
    };

insert

#Data

$x isa noRoleEntity, has name 'noRoleEntity';