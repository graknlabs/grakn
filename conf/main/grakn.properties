#
# Grakn - A Distributed Semantic Database
# Copyright (C) 2016  Grakn Labs Limited
#
# Grakn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grakn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Grakn. If not, see <http://www.gnu.org/licenses/gpl.txt>.
#

############################# Graph Configuration #############################

# Factory
factory.internal=ai.grakn.factory.TitanInternalFactory
factory.analytics=ai.grakn.factory.TitanHadoopInternalFactory

# Computer
# This is being removed in another PR
graph.computer=ai.grakn.graph.internal.computer.GraknSparkComputer

# The name of the default graph keyspace. This is mainly used
graph.default-keyspace=grakn

# Number of instances after which Grakn should shard any type node. Sharding is the
# mechanism by which Grakn mitigates against supernodes.
# A larger sharding threshold will increase runtime as the graph grows and decrease
# the likelihood of supernodes. A threshold that is too small will create supernodes
# more frequently.
graph.sharding-threshold=10000

# How long, in milliseconds, graph-level ontology elements will be
# cached. Longer cache timeouts means writing will be much faster, particularly for
# batch loading. Shorter cache timeouts are better for memory usage and in some cases
# may help avoid GC issues.
graph.ontology-cache-timeout-ms=600000
graph.batch.ontology-cache-timeout-ms=600000

############################# Server Configuration #############################

# Port number to use for Grakn engine server to listen on. If provided port = 0
# then an arbitrary available port will be used
server.port=4567
# Set the IP address that Grakn engine server will listen on.
server.host=0.0.0.0
# Set the external folder serving static files to the Grakn dashboard.
server.static-file-dir=../assets/

# May either be "true" or "false" to enable authentication for protected REST endpoints.
# When true must include the JWT token
password.protected=false
admin.password=grakn
# JWT json key used to encrypt and decrypt the token send in REST requests
# If authentication above (password.protected) is false, this property is not used
# JWT.secret=Anzdz9l4TG8N5y18oaTDueqJQca1aX7loaz0U8Hz

# The task manager is responsible for the maintaining the lifecycle of tasks, including
# restarting tasks when an engine instance dies. Out of the box, Grakn provides
# ai.grakn.engine.tasks.manager.{SingleQueueTaskManager, StandaloneTaskManager}.
#
# - StandaloneTaskManager is an in-memory implementation of the TaskManager.
#   Only for use in a testing environment; should the Grakn engine instance fail all
#   running or submitted tasks will be lost.
# - SingleQueueTaskManager is a distributed version of the TaskManager Kafka
#   and Zookeeper. For use in a cluster environment.
#
taskmanager.implementation=ai.grakn.engine.tasks.manager.StandaloneTaskManager

#RESTLoader Config
loader.repeat-commits=5

#Background tasks Config
tasks.postprocessing.delay=60000

# This defines the number of threads to be used when executing tasks. Consider
# increasing this number to increase engine task throughput and CPU usage.
# If the provided number of threads = 0 then the number of processors available to
# the Java virtual machine at startup time will be used.
loader.threads=0

############################# Logging Configuration #############################

# Single directory under which to store log files
log.dirs=../logs/
# Specify the log verbosity level. This can be one of:
#
# ERROR  (critical errors indicating the application has failed)
# WARN   (errors that will not affect the overall running of the application)
# INFO:  (minimally verbose, including Grakn engine lifecycle events)
# DEBUG: (verbose, non production use, server task lifecycle events)
# TRACE: (extraordinarily verbose, be brave, including graql query traversal paths,
#         extra task lifecycle events, kafka consumer offsets, etc)
log.level=INFO

############################# Titan Graph Configuration #############################
# See the Titan docs (http://s3.thinkaurelius.com/docs/titan/1.0.0/configuration.html)
# for more explanations of these properties.
# Any titan property can be added to this file and will be forwarded to the
# Titan Graph library.

# Whether to enable Titanâ€™s database-level cache, which is shared across all transactions.
# Enabling this option speeds up traversals by holding hot graph elements in memory,
# but also increases the likelihood of reading stale data. Disabling it forces each transaction
# to independently fetch graph elements from storage before reading/writing them.
cache.db-cache=true

# How long, in milliseconds, database-level cache will keep entries after flushing them.
cache.db-cache-clean-wait=20

# Titan Cache Expiry Time in milliseconds
cache.db-cache-time=180000

# Titan Cache Size in proportion to JVM size 0 (small) to 1 (large)
cache.db-cache-size=0.25

# Storage Backend
storage.backend=cassandra

# Host Location
storage.hostname=127.0.0.1

storage.cassandra.frame-size-mb=200

############################# Redis Configuration #############################
# IP or hostname on which Redis is listening for connections.
redis.host=localhost

# Port on which Redis accepts connections.
redis.port=6379

############################# Kafka Client Configuration #############################
# See Kafka docs (https://kafka.apache.org/documentation/#configuration) for more
# explanations of these properties.
#
# Kafka properties included in this file will be forwarded to the kafka
# consumers and producers.
#
# Kafka consumer properties overridden by Grakn engine:
# enable.auto.commit   (false)
# auto.offset.reset    (earliest)
# metadata.max.age.ms  (1000)
# max.poll.interval.ms (Integer.MAX_VALUE)
# max.poll.records     (1)

# A list of host/port pairs to use for establishing the initial connection to
# the Kafka cluster. This list only impacts the initial hosts used to discover
# the full set of servers.
#
# This list should be in the form host1:port1,host2:port2,....
bootstrap.servers=localhost:9092

############################# Zookeeper Configuration #############################

tasks.zookeeper.servers=127.0.0.1:2181
tasks.zookeeper.session_timeout_ms=60000
tasks.zookeeper.connection_timeout_ms=15000
tasks.zookeeper.backoff.base_sleep=1000
tasks.zookeeper.backoff.max_retries=3
tasks.scheduler.polling-frequency=1000
tasks.runner.polling-frequency=1000
tasks.zookeeper.namespace=grakn

############################# Gremlin Configuration #############################
gremlin.graph=org.apache.tinkerpop.gremlin.hadoop.structure.HadoopGraph
gremlin.hadoop.graphInputFormat=com.thinkaurelius.titan.hadoop.formats.cassandra.CassandraInputFormat
gremlin.hadoop.graphOutputFormat=org.apache.tinkerpop.gremlin.hadoop.structure.io.gryo.GryoOutputFormat
gremlin.hadoop.jarsInDistributedCache=true
gremlin.hadoop.inputLocation=none
#gremlin.hadoop.outputLocation=/test/output
gremlin.hadoop.outputLocation=output

############################# Cassandra Cluster Configuration #############################
titanmr.ioformat.conf.storage.backend=cassandra
titanmr.ioformat.conf.storage.hostname=localhost
titanmr.ioformat.cf-name=edgestore

############################# SparkGraphComputer Configuration #############################
#spark.master=spark://lxd-cluster2-cassandra1:7077
spark.master=local[*]
#spark.executor.memory=1g
#spark.executor.cores=8
#spark.cores.max=24
spark.serializer=org.apache.spark.serializer.KryoSerializer
spark.ui.showConsoleProgress=false

############################# Apache Cassandra InputFormat Configuration #############################
cassandra.input.partitioner.class=org.apache.cassandra.dht.Murmur3Partitioner
cassandra.input.predicate=0c00020b0001000000000b000200000000020003000800047fffffff0000
cassandra.input.columnfamily=edgestore
cassandra.range.batch.size=4096
cassandra.thrift.framed.size_mb=1024

############################# Hadoop Cluster configuration #############################
#fs.defaultFS=hdfs://lxd-cluster2-cassandra1:9000
