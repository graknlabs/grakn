#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

version: 2.1
commands:
  install-bazel-linux-rbe:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-linux.sh
      - run: bash ./install-bazel-linux.sh && rm ./install-bazel-linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-rbe.sh
      - run: bash ./install-bazel-rbe.sh && rm ./install-bazel-rbe.sh

  install-bazel-mac:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-mac.sh
      - run: bash ./install-bazel-mac.sh && rm ./install-bazel-mac.sh

  install-rpm:
    steps:
      - run: sudo apt update && sudo apt install rpm -y

  run-bazel-rbe:
    parameters:
      command:
        type: string
    steps:
      - run: bazel run @graknlabs_build_tools//ci:run-bazel-rbe -- << parameters.command >>

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - install-rpm
      - checkout
      - run: bazel run @graknlabs_build_tools//checkstyle:test-coverage
      - run-bazel-rbe:
          command: bazel build //...

  test-common:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //common/... --test_output=errors

  test-console:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - install-rpm
      - checkout
      - run-bazel-rbe:
          command: bazel test //console/... --test_output=errors

  test-server:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - install-rpm
      - checkout
      - run-bazel-rbe:
          command: bazel test //server/... --test_output=errors

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/server/... --test_output=errors
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/executor/... --test_output=errors
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/query/... --test_output=errors

  test-integration-reasoner:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/reasoner/... --test_output=errors

  test-integration-analytics:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/analytics/... --test_output=errors

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone

  test-assembly-mac-zip:
    macos:
      xcode: "9.0"
    working_directory: ~/grakn
    steps:
      - install-bazel-mac
      - checkout
      - run-bazel-rbe:
          command: bazel build //:assemble-mac-zip
      - run: unzip bazel-genfiles/grakn-core-all-mac.zip -d bazel-genfiles/
      - run: nohup bazel-genfiles/grakn-core-all-mac/grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: bazel-genfiles/grakn-core-all-mac/grakn server stop

  test-assembly-windows-zip:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - run:
          command: test/assembly/windows/windows-zip.py
          no_output_timeout: 20m

  test-assembly-linux-targz:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel build //:assemble-linux-targz
      - run: tar -xf bazel-genfiles/grakn-core-all-linux.tar.gz -C bazel-genfiles
      - run: nohup bazel-genfiles/grakn-core-all-linux/grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: bazel-genfiles/grakn-core-all-linux/grakn server stop

  test-assembly-linux-apt:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel build //bin:assemble-linux-apt
      - run-bazel-rbe:
          command: bazel build //server:assemble-linux-apt
      - run-bazel-rbe:
          command: bazel build //console:assemble-linux-apt
      - run: sudo dpkg -i bazel-bin/bin/grakn-core-bin__all.deb
      - run: sudo dpkg -i bazel-bin/server/grakn-core-server__all.deb
      - run: sudo dpkg -i bazel-bin/console/grakn-core-console__all.deb
      - run: sudo chown -R circleci:circleci /opt/grakn/ # TODO: how do we avoid having to chown?
      - run: nohup grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: grakn server stop

  test-assembly-docker:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: test/assembly/docker.py

  deploy-maven-snapshot:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //api:deploy-maven -- snapshot $CIRCLE_SHA1
          bazel run //protocol:deploy-maven -- snapshot $CIRCLE_SHA1
          bazel run //concept:deploy-maven -- snapshot $CIRCLE_SHA1
          bazel run //common:deploy-maven -- snapshot $CIRCLE_SHA1

  deploy-apt-snapshot:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: echo $(date +%s)-$(cat VERSION)-$CIRCLE_SHA1 > VERSION && cat VERSION
      - run: |
          export DEPLOY_APT_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_APT_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //bin:deploy-apt -- snapshot
          bazel run //console:deploy-apt -- snapshot
          bazel run //server:deploy-apt -- snapshot
          bazel run //:deploy-apt -- snapshot
      - run: cp VERSION VERSION.apt
      - persist_to_workspace:
          root: ~/grakn
          paths:
            - VERSION.apt

  deploy-rpm-snapshot:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo apt install rpm
      - run: echo $(cat VERSION)_$CIRCLE_SHA1 > VERSION && cat VERSION
      - run: |
          export DEPLOY_RPM_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_RPM_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //bin:deploy-rpm -- snapshot
          bazel run //server:deploy-rpm -- snapshot
          bazel run //console:deploy-rpm -- snapshot
          bazel run //:deploy-rpm -- snapshot
      - run: cp VERSION VERSION.rpm
      - persist_to_workspace:
          root: ~/grakn
          paths:
            - VERSION.rpm

  test-deployment-linux-apt:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - attach_workspace:
          at: ~/circleci-workspace
      - run: sudo add-apt-repository 'deb [ arch=all ] https://repo.grakn.ai/repository/apt-snapshot/ trusty main'
      - run: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 8F3DA4B5E9AEF44C
      - run: sudo apt update
      - run: mv ~/circleci-workspace/VERSION.apt VERSION
      - run: cat VERSION
      - run: sudo apt install grakn-core-all=$(cat VERSION)
      - run: sudo chown -R circleci:circleci /opt/grakn/ # TODO: how do we avoid having to chown?
      - run: nohup grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: grakn server stop

  test-deployment-linux-rpm:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - attach_workspace:
          at: ~/circleci-workspace
      - run: mv ~/circleci-workspace/VERSION.rpm VERSION
      - run: test/deployment/rpm.py

  sync-dependencies:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export SYNC_DEPENDENCIES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:sync-dependencies -- --source grakn@0dfc2b687bf69ddd3af04ae57e9dcd11b133e103 --targets grakn-kgms:sync-dependencies-test

  release-approval:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-approval

  deploy-github:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export DEPLOY_GITHUB_TOKEN=$REPO_GITHUB_TOKEN
          bazel run //:deploy-github -- $CIRCLE_SHA1

  deploy-apt:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: cat VERSION
      - run: |
          export DEPLOY_APT_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_APT_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //bin:deploy-apt -- release
          bazel run //console:deploy-apt -- release
          bazel run //server:deploy-apt -- release
          bazel run //:deploy-apt -- release

  deploy-rpm:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo apt install rpm
      - run: cat VERSION
      - run: |
          export DEPLOY_RPM_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_RPM_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //bin:deploy-rpm -- release
          bazel run //server:deploy-rpm -- release
          bazel run //console:deploy-rpm -- release
          bazel run //:deploy-rpm -- release

  deploy-brew:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export DEPLOY_BREW_TOKEN=$REPO_GITHUB_TOKEN
          bazel run //:deploy-brew -- release

  deploy-docker:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          docker login -u $REPO_DOCKER_USERNAME -p $REPO_DOCKER_PASSWORD
          bazel run //:deploy-docker

  deploy-maven:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: cat VERSION
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run //api:deploy-maven -- release $(cat VERSION)
          bazel run //protocol:deploy-maven -- release $(cat VERSION)
          bazel run //concept:deploy-maven -- release $(cat VERSION)
          bazel run //common:deploy-maven -- release $(cat VERSION)

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete origin grakn-release-branch

workflows:
  sync-dependencies-test:
    jobs:
      - sync-dependencies
