version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-linux-x86_64.sh
            chmod +x bazel-0.20.0-installer-linux-x86_64.sh
            sudo ./bazel-0.20.0-installer-linux-x86_64.sh
  bazel_install_mac:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-darwin-x86_64.sh
            chmod +x bazel-0.20.0-installer-darwin-x86_64.sh
            sudo ./bazel-0.20.0-installer-darwin-x86_64.sh
  bazel_add_rbe_credential:
    steps:
      - run:
          name: Bazel - Add RBE Credential
          command: |
            if [[ -n "$BAZEL_RBE_CREDENTIAL" ]]; then
              BAZEL_RBE_CREDENTIAL_LOCATION=~/.config/gcloud/application_default_credentials.json
              echo "An RBE credential is found and will be saved to $BAZEL_RBE_CREDENTIAL_LOCATION. Bazel will be executed with RBE support."
              mkdir -p ~/.config/gcloud/
              echo $BAZEL_RBE_CREDENTIAL > "$BAZEL_RBE_CREDENTIAL_LOCATION"
            else
              echo "No RBE credential found. Bazel will be executed locally without RBE support."
            fi

  bazel:
    parameters:
      command:
          type: string
    steps:
      - run:
          name: Bazel - Execute
          command: |
            if [[ -f ~/.config/gcloud/application_default_credentials.json ]]; then
              echo "Bazel will be executed with RBE support. This means the build is remotely executed and the cache will be re-used by subsequent CI jobs."
              CMD="<< parameters.command >> --config=rbe"
            else
              echo "Bazel will be executed locally (without RBE support)."
              CMD="<< parameters.command >>"
            fi
            echo "Executing $CMD"
            $CMD

  rpm_install:
    steps:
      - run:
          name: Install rpm (for rpmbuild)
          command: sudo apt update && sudo apt install rpm -y
jobs:
  tests:
    machine: true
    steps:
      - run: echo test succeeded.
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: python ./check-for-missing-checkstyle-rule.py
      - rpm_install
      - bazel:
          command: bazel build //...
      - run: mkdir dist/ && mv bazel-genfiles/grakn-core-all.zip dist/
      - persist_to_workspace: # TODO: share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - .

  client-java:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //client-java/... --test_size_filters=small --test_output=errors
    - bazel:
        command: bazel test //client-java/... --test_size_filters=medium,large,enormous --test_output=errors

  client-nodejs:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - run: bazel build //:distribution
    - run: unzip bazel-genfiles/grakn-core-all.zip -d bazel-genfiles/dist/
    - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
    - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test-end-to-end/test-fixtures/basic-genealogy.gql -k gene
    - run: bazel test //client-nodejs:test-integration --test_output=streamed

  client-python:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - run: bazel build //:distribution
    - run: unzip bazel-genfiles/grakn-core-all.zip -d bazel-genfiles/dist/
    - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
    - run: bazel test //client_python:test_integration --test_output=streamed

  common:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //common/... --test_output=errors

  console:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - rpm_install
      - bazel:
          command: bazel test //console/... --test_output=errors

  graql:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //graql/... --test_output=errors

  server:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - rpm_install
    - bazel:
        command: bazel test //server/... --test_output=errors

  workbase:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //workbase:tests-unit --test_output=errors
    - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 -y
    - run: sudo apt install libnss3 libasound2 libgconf-2-4 -y
    - bazel:
        command: bazel build //:distribution
    - run: unzip bazel-genfiles/grakn-core-all.zip -d bazel-genfiles/dist/
    - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
    - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test-end-to-end/test-fixtures/basic-genealogy.gql -k gene
    - run: Xvfb :99 &
    - run: export DISPLAY=:99
    - bazel:
        command: bazel test //workbase:tests-e2e --test_output=streamed

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel test //test-integration/server/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/internal/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/query/... --test_output=errors

  test-integration-reasoner:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/reasoner:reasoning-it --test_output=errors
    - bazel:
        command: bazel test //test-integration/graql/reasoner:geo-inference-it --test_output=errors

  test-integration-reasoner-general:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/reasoner/reasoning/... --test_output=errors

  test-integration-reasoner-components:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/reasoner/atomic/... --test_output=errors
    - bazel:
        command: bazel test //test-integration/graql/reasoner/benchmark/... --test_output=errors
    - bazel:
        command: bazel test //test-integration/graql/reasoner/cache/... --test_output=errors
    - bazel:
        command: bazel test //test-integration/graql/reasoner/query/... --test_output=errors

  test-integration-analytics:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/analytics/... --test_output=errors

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel build //:distribution
      - bazel:
          command: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone
  distributions:
    machine: true
    steps:
      - run: echo distributions succeeded.
  dist-mac:
    macos:
      xcode: "9.0"
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install_mac
      - bazel_add_rbe_credential
      - run: bazel build //:distribution
      - run: unzip bazel-genfiles/grakn-core-all.zip -d bazel-genfiles/dist/
      - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
      - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server stop
  dist-ubuntu:
    docker:
      - image: ubuntu:16.04
        environment:
          _JAVA_OPTIONS: -Xmx2g
    working_directory: ~/grakn
    steps:
      - run: apt-get update
      - run: apt-get install -y software-properties-common
      - run: add-apt-repository ppa:openjdk-r/ppa
      - run: apt-get update
      - run: apt-get install -y sudo curl unzip git python gcc python-dev build-essential openjdk-8-jdk
      
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      
      - run: bazel build --jobs 1 //:distribution-deb
      - run: dpkg -i bazel-bin/distribution-deb.deb
      - run: bazel build --jobs 1 //server:distribution-deb
      - run: dpkg -i bazel-bin/server/distribution-deb.deb
      - run: bazel build --jobs 1 //console:distribution-deb
      - run: dpkg -i bazel-bin/console/distribution-deb.deb
      - run: nohup grakn server start
      - run: nohup grakn server stop

  # TODO: enable once issue #4811 is fixed
  # dist-centos:
  #   docker:
  #     - image: centos:7.6.1810
  #       environment:
  #         _JAVA_OPTIONS: -Xmx2g
  #   working_directory: ~/grakn
  #   steps:
  #     - run: yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
  #     - run: yum update -y
  #     - run: yum install -y sudo procps which gcc gcc-c++ python-devel unzip git java-1.8.0-openjdk-devel rpm-build
  #     - run: git version
  #     - checkout
  #     - bazel_install
  #     - bazel_add_rbe_credential
  #     - run: bazel build --jobs 1 //:distribution-rpm
  #     - run: yum localinstall -y bazel-bin/distribution-rpm.rpm
  #     - run: bazel build --jobs 1 //server:distribution-rpm
  #     - run: yum localinstall -y bazel-bin/server/distribution-rpm.rpm
  #     - run: bazel build --jobs 1 //console:distribution-rpm
  #     - run: yum localinstall -y bazel-bin/console/distribution-rpm.rpm
  #     - run: nohup grakn server start
  #     - run: nohup grakn server stop

  dist-fedora:
    docker:
      - image: fedora:29
        environment:
          _JAVA_OPTIONS: -Xmx2g
    working_directory: ~/grakn
    steps:
      - run: yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
      - run: yum update -y
      - run: yum install -y sudo procps which gcc gcc-c++ python-devel unzip git java-1.8.0-openjdk-devel rpm-build
      - run: git version
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: bazel build --jobs 1 //:distribution-rpm
      - run: yum localinstall -y bazel-bin/distribution-rpm.rpm
      - run: bazel build --jobs 1 //server:distribution-rpm
      - run: yum localinstall -y bazel-bin/server/distribution-rpm.rpm
      - run: bazel build --jobs 1 //console:distribution-rpm
      - run: yum localinstall -y bazel-bin/console/distribution-rpm.rpm
      - run: grakn server start
      - run: grakn server stop

  ci-summary:
    machine: true
    steps:
      - run:
          name: Displaying tests and benchmark results
          command: echo 'see tests and benchmark results here - https://source.cloud.google.com/results/invocations/c4456b19-e749-4644-a0ae-c71cf1dc5871/targets.'
  approve-release:
    machine: true
    steps:
      - run: echo approve-release succeeded.
  deploy-github:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            bazel build //:distribution
            mv bazel-genfiles/grakn-core-all.zip bazel-genfiles/grakn-core-$(cat "VERSION").zip
            wget https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_386.tar.gz
            tar xvf ghr_v0.12.0_linux_386.tar.gz
            VERSION_TAG="v"$(cat "VERSION")
            ghr_v0.12.0_linux_386/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -draft ${VERSION_TAG} bazel-genfiles/grakn-core-$(cat "VERSION").zip
  deploy-maven:
    machine: true
    steps:
      - run: echo deploy-maven succeeded.
  deploy-npm:
    machine: true
    steps:
      - run: echo deploy-npm succeeded.
  deploy-pypi:
    machine: true
    steps:
      - run: echo deploy-pypi succeeded.
  deploy-deb:
    machine: true
    steps:
      - run: echo deploy-deb succeeded.
  deploy-rpm:
    machine: true
    steps:
      - run: echo deploy-rpm succeeded.
  deploy-brew:
    machine: true
    steps:
      - run: echo deploy-brew succeeded.
  deploy-workbase:
    machine: true
    steps:
      - run: echo deploy-workbase succeeded.
  deploy-workbase-mac:
    machine: true
    steps:
      - run: echo deploy-workbase-mac succeeded.
  deploy-workbase-linux:
    machine: true
    steps:
      - run: echo deploy-workbase-linux succeeded.
  deploy-workbase-windows:
    machine: true
    steps:
      - run: echo deploy-workbase-windows succeeded.
  git-tag-release:
    machine: true
    steps:
      - run: echo git-tag-release succeeded.
  docs-merge-dev-to-master:
    machine: true
    steps:
      - run: echo docs-merge-dev-to-master succeeded.
workflows:
  version: 2
  ci-pipeline-release:
    jobs:
      - dist-ubuntu
      # - tests
      # - build:
      #     requires:
      #       - tests
      # - client-java:
      #     requires:
      #       - tests
      # - client-nodejs:
      #     requires:
      #       - tests
      # - client-python:
      #     requires:
      #       - tests
      # - common:
      #     requires:
      #       - tests
      # - console:
      #     requires:
      #       - tests
      # - graql:
      #     requires:
      #       - tests
      # - server:
      #     requires:
      #       - tests
      # - workbase:
      #     requires:
      #       - tests
      # - test-integration:
      #     requires:
      #       - tests
      # - test-integration-reasoner:
      #     requires:
      #       - tests
      # - test-integration-reasoner-general:
      #     requires:
      #       - tests
      # - test-integration-reasoner-components:
      #     requires:
      #       - tests
      # - test-integration-analytics:
      #     requires:
      #       - tests
      # - test-end-to-end:
      #     requires:
      #       - tests
      # - distributions:
      #     requires:
      #       - build
      #       - client-java
      #       - client-nodejs
      #       - client-python
      #       - common
      #       - console
      #       - graql
      #       - server
      #       - workbase
      #       - test-integration
      #       - test-integration-reasoner
      #       - test-integration-reasoner-general
      #       - test-integration-reasoner-components
      #       - test-integration-analytics
      #       - test-end-to-end
      # - dist-mac:
      #     requires:
      #       - distributions
      # - dist-ubuntu:
      #     requires:
      #       - distributions
      # # - dist-centos:
      # #     requires:
      # #       - distributions
      # - dist-fedora:
      #     requires:
      #       - distributions
      # - approve-deploy-github:
      #     type: approval
      #     requires:
      #       - dist-mac
      #       - dist-ubuntu
      #       - dist-fedora
      # - deploy-github:
      #     requires:
      #       - approve-deploy-github
      # - approve-deploy-all:
      #     type: approval
      #     requires:
      #       - deploy-github
      # - deploy-maven:
      #     requires:
      #       - approve-deploy-all
      # - deploy-npm:
      #     requires:
      #       - approve-deploy-all
      # - deploy-pypi:
      #     requires:
      #       - approve-deploy-all
      # - deploy-deb:
      #     requires:
      #       - approve-deploy-all
      # - deploy-rpm:
      #     requires:
      #       - approve-deploy-all
      # - deploy-brew:
      #     requires:
      #       - approve-deploy-all
      # - deploy-workbase-mac:
      #     requires:
      #       - approve-deploy-all
      # - deploy-workbase-linux:
      #     requires:
      #       - approve-deploy-all
      # - deploy-workbase-windows:
      #     requires:
      #       - approve-deploy-all
      # - git-tag-release:
      #     requires:
      #       - deploy-maven
      #       - deploy-npm
      #       - deploy-pypi
      #       - deploy-deb
      #       - deploy-rpm
      #       - deploy-brew
      #       - deploy-workbase-mac
      #       - deploy-workbase-linux
      #       - deploy-workbase-windows
      # - approve-docs-merge:
      #     type: approval
      #     requires:
      #       - git-tag-release
      # - docs-merge-dev-to-master:
      #     requires:
      #       - approve-docs-merge
