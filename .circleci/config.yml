version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-linux-x86_64.sh
            chmod +x bazel-0.20.0-installer-linux-x86_64.sh
            sudo ./bazel-0.20.0-installer-linux-x86_64.sh

  bazel_add_rbe_credential:
    steps:
      - run:
          name: Bazel - Add RBE Credential
          command: |
            if [[ -n "$BAZEL_RBE_CREDENTIAL" ]]; then
              BAZEL_RBE_CREDENTIAL_LOCATION=~/.config/gcloud/application_default_credentials.json
              echo "An RBE credential is found and will be saved to $BAZEL_RBE_CREDENTIAL_LOCATION. Bazel will be executed with RBE support."
              mkdir -p ~/.config/gcloud/
              echo $BAZEL_RBE_CREDENTIAL > "$BAZEL_RBE_CREDENTIAL_LOCATION"
            else
              echo "No RBE credential found. Bazel will be executed locally without RBE support."
            fi

  bazel:
    parameters:
      command:
          type: string
    steps:
      - run:
          name: Bazel - Execute
          command: |
            # # TODO: re-add RBE once it's been fixed
            # if [[ -f ~/.config/gcloud/application_default_credentials.json ]]; then
            #     echo "Bazel will be executed with RBE support. This means the build is remotely executed and the cache will be re-used by subsequent CI jobs."
            #     CMD="<< parameters.command >> --config=rbe"
            # else
            #     echo "Bazel will be executed locally (without RBE support)."
            #     CMD="<< parameters.command >>"
            # fi
            # echo "Executing $CMD"
            # $CMD

            echo "Bazel will be executed locally because there is an issue with the RBE execution. TODO: re-activate RBE once it's been fixed"
            CMD="<< parameters.command >>"
            echo "Executing $CMD"
            $CMD


  rpm_install:
    steps:
      - run:
          name: Install rpm (for rpmbuild)
          command: sudo apt update && sudo apt install rpm -y

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: python ./check-for-missing-checkstyle-rule.py
      - rpm_install
      - bazel:
          command: bazel build //...
      - run: mkdir dist/ && mv bazel-genfiles/grakn-core-all.zip dist/
      - persist_to_workspace: # TODO: share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - .

  client-java:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //client-java/... --test_size_filters=small --test_output=errors
    - bazel:
        command: bazel test //client-java/... --test_size_filters=medium,large,enormous --test_output=errors

  common:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //common/... --test_output=errors

  console:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - rpm_install
      - bazel:
          command: bazel test //console/... --test_output=errors

  graql:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //graql/... --test_output=errors

  server:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - rpm_install
    - bazel:
        command: bazel test //server/... --test_output=errors

  workbase:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - run: bazel test //workbase:tests-unit --test_output=errors
    - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 -y
    - run: sudo apt install libnss3 libasound2 libgconf-2-4 -y
    - run: bazel build //:distribution
    - run: unzip bazel-genfiles/grakn-core-all.zip -d bazel-genfiles/dist/
    - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
    - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test-end-to-end/test-fixtures/basic-genealogy.gql -k gene
    - run: Xvfb :99 &
    - run: export DISPLAY=:99
    - run: bazel test //workbase:tests-e2e --test_output=streamed

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel test //test-integration/server/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/internal/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/query/... --test_output=errors

  test-integration-reasoner:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/reasoner/... --test_output=errors

  test-integration-analytics:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/analytics/... --test_output=errors

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel build //:distribution
      - bazel:
          command: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone

  docs-update-grakn-dependency-on-dev-branch:
    machine: true
    steps:
      - checkout
      - run:
          name: Make docs (development branch) depend on the latest Grakn (master)
          command: |
            mkdir docs
            cd docs
            python ../.circleci/docs-update-grakn-dependency-on-dev-branch.py

  build-workbase-linux:
      machine: true
      working_directory: ~/grakn
      steps:
        - attach_workspace:
            at: ~/grakn
        - bazel:
            command: bazel run @nodejs//:npm install
        - bazel:
            command: bazel build //workbase:distribution
        - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV # TODO: remove 'v' from tag name and use it as Grakn Version to be released
        # TODO: make a separate rule for building on Linux / use another naming scheme
        - run: mv ./bazel-genfiles/workbase/grakn-workbase.zip ~/grakn/artifacts/grakn-workbase-${GRAKN_VERSION}-linux.tar.gz
        - persist_to_workspace:
            root: ~/grakn
            paths:
              - artifacts/*-linux.tar.gz

  build-workbase-mac:
      macos:
          xcode: "9.0"
      working_directory: ~/grakn
      steps:
        - attach_workspace:
            at: ~/grakn
        - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV # TODO: remove 'v' from tag name and use it as Grakn Version to be released
        - run: unzip artifacts/grakn-core-${GRAKN_VERSION}.zip
        - run: cd grakn-core-${GRAKN_VERSION} && nohup ./grakn server start
        - run: cd grakn-core-${GRAKN_VERSION} && ./graql console -f ./examples/basic-genealogy.gql -k gene
        - bazel:
            command: bazel run @nodejs//:npm install
        - bazel:
            command: bazel test //workbase:tests-e2e --test_output=errors
        - bazel:
            command: bazel build //workbase:distribution
        - run: mv ./bazel-genfiles/workbase/grakn-workbase.zip ~/grakn/artifacts/grakn-workbase-${GRAKN_VERSION}-mac.zip
        - persist_to_workspace:
            root: ~/grakn
            paths:
              - artifacts/*-mac.zip

  publish-github-draft:
    docker:
      - image: cibuilds/github:0.10
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft ${CIRCLE_TAG} ./artifacts

  grakn-release-build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - run: echo 'export GRAKN_VERSION=$(echo ${CIRCLE_TAG} | cut -c 2-)' >> $BASH_ENV # TODO: remove 'v' from tag name and use it as Grakn Version to be released
      - run: mvn --batch-mode install -T 2.5C -DskipTests=true
      - run: mkdir ~/grakn/artifacts
      - run: mv grakn-dist/target/grakn-core-${GRAKN_VERSION}.zip ~/grakn/artifacts
      - persist_to_workspace: # TODO: share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - ./artifacts
            - ./workbase

workflows:
  ci-pull-request:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - client-java:
          filters:
            branches:
              ignore: master
      - common:
          filters:
            branches:
              ignore: master
      - console:
          filters:
            branches:
              ignore: master
      - graql:
          filters:
            branches:
              ignore: master
      - server:
          filters:
            branches:
              ignore: master
      - workbase:
          filters:
            branches:
              ignore: master
      - test-integration:
          filters:
            branches:
              ignore: master
      - test-integration-reasoner:
          filters:
            branches:
              ignore: master
      - test-integration-analytics:
          filters:
            branches:
              ignore: master
      - test-end-to-end:
          filters:
            branches:
              ignore: master

  ci-master-branch:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - client-java:
          filters:
            branches:
              only: master
      - common:
          filters:
            branches:
              only: master
      - console:
          filters:
            branches:
              only: master
      - graql:
          filters:
            branches:
              only: master
      - server:
          filters:
            branches:
              only: master
      - workbase:
          filters:
            branches:
              only: master
      - test-integration:
          filters:
            branches:
              only: master
      - test-integration-reasoner:
          filters:
            branches:
              only: master
      - test-integration-analytics:
          filters:
            branches:
              only: master
      - test-end-to-end:
          filters:
            branches:
              only: master
      - docs-update-grakn-dependency-on-dev-branch:
          requires:
            - build
            - client-java
            - common
            - console
            - graql
            - server
            - workbase
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end
          filters:
            branches:
              only: master

  build-and-deploy:
    jobs:
      - grakn-release-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-mac:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-linux:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-draft:
          requires:
            - build-workbase-mac
            - build-workbase-linux
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
