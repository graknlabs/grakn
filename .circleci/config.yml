version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-linux-x86_64.sh
            chmod +x bazel-0.20.0-installer-linux-x86_64.sh
            sudo ./bazel-0.20.0-installer-linux-x86_64.sh
  bazel_add_rbe_credential:
    steps:
      - run:
          name: Bazel - Add RBE Credential
          command: |
            if [[ -n "$BAZEL_RBE_CREDENTIAL" ]]; then
              BAZEL_RBE_CREDENTIAL_LOCATION=~/.config/gcloud/application_default_credentials.json
              echo "An RBE credential is found and will be saved to $BAZEL_RBE_CREDENTIAL_LOCATION. Bazel will be executed with RBE support."
              mkdir -p ~/.config/gcloud/
              echo $BAZEL_RBE_CREDENTIAL > "$BAZEL_RBE_CREDENTIAL_LOCATION"
            else
              echo "No RBE credential found. Bazel will be executed locally without RBE support."
            fi
  bazel:
    parameters:
      command:
          type: string
    steps:
      - run:
          name: Bazel - Execute
          command: |
            if [[ -f ~/.config/gcloud/application_default_credentials.json ]]; then
              echo "Bazel will be executed with RBE support. This means the build is remotely executed and the cache will be re-used by subsequent CI jobs."
              CMD="<< parameters.command >> --config=rbe"
            else
              echo "Bazel will be executed locally (without RBE support)."
              CMD="<< parameters.command >>"
            fi
            echo "Executing $CMD"
            $CMD
  rpm_install:
    steps:
      - run:
          name: Install rpm (for rpmbuild)
          command: sudo apt update && sudo apt install rpm -y

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: python ./dependencies/tools/checkstyle/test-coverage.py
      - rpm_install
      - bazel:
          command: bazel build //...
      - run: mkdir dist/ && mv bazel-genfiles/grakn-core-all.zip dist/
      - persist_to_workspace: # TODO: share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - .

  common:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel test //common/... --test_output=errors

  console:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - rpm_install
      - bazel:
          command: bazel test //console/... --test_output=errors

  server:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - rpm_install
      - bazel:
          command: bazel test //server/... --test_output=errors

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel test //test-integration/server/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/executor/... --test_output=errors
      - bazel:
          command: bazel test //test-integration/graql/query/... --test_output=errors

  test-integration-reasoner:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/reasoner/... --test_output=errors

  test-integration-analytics:
    machine: true
    working_directory: ~/grakn
    steps:
    - checkout
    - bazel_install
    - bazel_add_rbe_credential
    - bazel:
        command: bazel test //test-integration/graql/analytics/... --test_output=errors

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel build //:distribution
      - bazel:
          command: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone

  grakn-docs-update:
    machine: true
    steps:
      - checkout
      - run:
          name: Sync docs:development client-java:development client-python:development client-nodejs:development to the latest Grakn version
          command: |
            bazel run @graknlabs_grabl//sync:dependency-update -- --dependency grakn:master \
              --user docs:development client-java:development client-python:development client-nodejs:development
  
  approve-release:
    machine: true
    steps:
      - checkout
      - run: python .circleci/approve-release.py

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete origin grakn-core-release-branch

  publish-github-draft:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: bazel run //:deploy-github-zip -- ${GRABL_CREDENTIAL}

workflows:
  # the 'ci' workflow consists of jobs which:
  #  - executes tests (executed on pull requests and master)
  #  - syncs docs/development to the latest grakn version (executed on master only)
  #  - waits for an approval for Grakn to be released (executed on master only)
  grakn-core:
    jobs:
      # test jobs
      - build:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - common:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - console:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - server:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - test-integration:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - test-integration-reasoner:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - test-integration-analytics:
          filters:
            branches:
              ignore: grakn-core-release-branch
      - test-end-to-end:
          filters:
            branches:
              ignore: grakn-core-release-branch

      # sync docs/development to the latest grakn version
      - grakn-docs-update:
          filters:
            branches:
              only: master
          requires:
            - build
            - common
            - console
            - server
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end

      # wait for an approval for Grakn to be released
      # triggers 'ci-release' workflow by creating a branch 'grakn-core-release-branch' in graknlabs/grakn
      - approve-release:
          filters:
            branches:
              only: master
          requires:
            - grakn-docs-update

  # the 'ci-release' workflow is triggered by the creation of 'grakn-core-release-branch' branch in graknlabs/grakn
  # it consists of jobs which:
  # - publishes Grakn by creating a Github release
  # - cleans up the 'grakn-core-release-branch' branch which was created by the approve-release job
  grakn-core-release:
    jobs:
      - publish-github-draft:
          filters:
            branches:
              only: grakn-core-release-branch
      - release-cleanup:
          requires:
            - publish-github-draft
          filters:
            branches:
              only: grakn-core-release-branch
