version: 2
references:
    prepare_apt_repositories: &prepare_apt_repositories
      run:
        name: Prepare apt repositories
        command: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get install apt-transport-https
          sudo apt-get update

    install_yarn_and_maven: &install_yarn_and_maven
      run: sudo apt-get -y install yarn maven

    install_node: &install_node
      run:
        name: Install nvm and node
        command: |
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
          export NVM_DIR="/opt/circleci/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install v10.5.0
          nvm alias default v10.5.0
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

    attach_grakn_workspace: &attach_grakn_workspace
      attach_workspace:
        at: ~/grakn

    restore_m2_cache: &restore_m2_cache
      restore_cache:
        name: Restore maven m2 cache
        key: grakn-cache-m2-version-8

    save_m2_cache: &save_m2_cache
      save_cache:
        name: Save maven m2 cache
        paths:
          - ~/.m2
        key: grakn-cache-m2-version-8

    list_unit_tests: &list_unit_tests
      run:
        name: List Of Unit Tests To Be Ran On This Machine
        command: cat parallelise-unit-tests.txt

    list_it_tests: &list_it_tests
      run:
        name: List Of IT Tests To Be Ran On This Machine
        command: cat parallelise-it-tests.txt

    start_grakn_server: &start_grakn_server
      run: nohup grakn-dist/target/grakn-core-test/grakn server start

    save_test_results: &save_test_results
      run:
        name: Save test results
        command: |
          mkdir -p ~/grakn-surefire-reports/
          find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/grakn-surefire-reports/ \;
        when: always

    run_unit_it_tests: &run_unit_it_tests
      run: mvn verify -Dsurefire.includesFile=`echo ~/grakn/parallelise-unit-tests.txt` -Dfailsafe.includesFile=`echo ~/grakn/parallelise-it-tests.txt` -P janus -U -Djetty.log.level=WARNING -Djetty.log.appender=STDOUT -DMaven.test.failure.ignore=true -Dsurefire.rerunFailingTestsCount=1

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - *prepare_apt_repositories
      - *install_yarn_and_maven
      - *install_node
      - *restore_m2_cache
      - run: mvn versions:set -DnewVersion=test -DgenerateBackupPoms=false # sets version to be `test` so that we can refer to zip using always grakn-core-test
      - run: mvn --batch-mode install -T 2.5C -DskipTests=true
      - run: tar -xf grakn-dist/target/grakn-core-test.tar.gz -C grakn-dist/target/
      - *save_m2_cache
      - persist_to_workspace: #share Grakn with other jobs by putting it in the workspace
          root: ~/grakn
          paths:
            - .

  unit-it-test-1:
    machine: true
    working_directory: ~/grakn
    steps:
      - *prepare_apt_repositories
      - *install_yarn_and_maven
      - *install_node
      - *attach_grakn_workspace
      - *restore_m2_cache
      - run:
          name: Create parallelise-unit-tests.txt and parallelise-it-tests.txt For Parallelisation Purpose
          command: |
            circleci tests glob "**/src/test/java/**/*Test.java" | circleci tests split --total="2" --index="0" > parallelise-unit-tests-filename.txt
            cat parallelise-unit-tests-filename.txt | xargs -I {} basename {} | xargs -I {} echo "**/{}" | sort > parallelise-unit-tests.txt
            circleci tests glob "**/src/test/java/**/*IT.java" | circleci tests split --total="2" --index="0" > parallelise-it-tests-filename.txt
            cat parallelise-it-tests-filename.txt | xargs -I {} basename {} | xargs -I {} echo "**/{}" | sort > parallelise-it-tests.txt
      - *list_unit_tests
      - *list_it_tests
      - *run_unit_it_tests
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  unit-it-test-2:
    machine: true
    working_directory: ~/grakn
    steps:
      - *prepare_apt_repositories
      - *install_yarn_and_maven
      - *install_node
      - *attach_grakn_workspace
      - *restore_m2_cache
      - run:
          name: Create parallelise-unit-tests.txt and parallelise-it-tests.txt For Parallelisation Purpose
          command: |
            circleci tests glob "**/src/test/java/**/*Test.java" | circleci tests split --total="2" --index="1" > parallelise-unit-tests-filename.txt
            cat parallelise-unit-tests-filename.txt | xargs -I {} basename {} | xargs -I {} echo "**/{}" | sort > parallelise-unit-tests.txt
            circleci tests glob "**/src/test/java/**/*IT.java" | circleci tests split --total="2" --index="1" > parallelise-it-tests-filename.txt
            cat parallelise-it-tests-filename.txt | xargs -I {} basename {} | xargs -I {} echo "**/{}" | sort > parallelise-it-tests.txt
      - *list_unit_tests
      - *list_it_tests
      - *run_unit_it_tests
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  distribution-e2e:
    machine: true
    working_directory: ~/grakn
    steps:
      - *attach_grakn_workspace
      - *restore_m2_cache
      - run: mvn verify -pl :test-distribution -Dtest="ai.grakn.distribution.**"
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  client-java-e2e:
    machine: true
    working_directory: ~/grakn
    steps:
      - *attach_grakn_workspace
      - *restore_m2_cache
      - run: mvn verify -pl :test-client-java -Dtest="ai.grakn.client.ClientJavaE2E" --also-make -DfailIfNoTests=false
      - *save_test_results
      - store_artifacts:
          path: ~/grakn-surefire-reports/
      - store_test_results:
          path: ~/grakn-surefire-reports/

  snb-e2e:
    machine: true
    working_directory: ~/grakn
    steps:
      - *attach_grakn_workspace
      - *restore_m2_cache
      - *start_grakn_server
      - run: PATH=$PATH:./grakn-test/test-snb/src/main/bash:./grakn-test/test-integration/src/test/bash:./grakn-dist/target/grakn-core-test PACKAGE=./grakn-dist/target/grakn-core-test WORKSPACE=. ./grakn-test/test-snb/src/main/bash/load.sh
      - run: PATH=$PATH:./grakn-test/test-snb/src/main/bash:./grakn-test/test-integration/src/test/bash:./grakn-dist/target/grakn-core-test PACKAGE=./grakn-dist/target/grakn-core-test WORKSPACE=. ./grakn-test/test-snb/src/main/bash/validate.sh

  biomed-e2e:
    machine: true
    working_directory: ~/grakn
    steps:
      - *attach_grakn_workspace
      - *restore_m2_cache
      - *start_grakn_server
      - run: PATH=$PATH:./grakn-dist/target/grakn-core-test ./grakn-test/test-biomed/load.sh
      - run: PATH=$PATH:./grakn-dist/target/grakn-core-test ./grakn-test/test-biomed/validate.sh

  client-nodejs-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - *prepare_apt_repositories
        - *install_yarn_and_maven
        - *install_node
        - *start_grakn_server
        - run: cd grakn-dist/target/grakn-core-test/ && ./graql console -f ./examples/basic-genealogy.gql -k gene
        - run: cd client-nodejs && yarn install && yarn run test

  client-python-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - run:
            name: Install python deps
            command: echo y | pyenv install 3.6.0; pyenv global 3.6.0
        - run:
            name: Install protobuf and grpc
            command: pip install protobuf grpcio grpcio-tools --user
        - *start_grakn_server
        - run: cd client-python && make protobuf
        - run: cd client-python && python -m unittest discover ./tests/integration/ -v

  workbase-unit-tests:
      docker:
        - image: circleci/node:8.11.2
      working_directory: ~/grakn
      steps:
        - checkout
        - run: cd workbase && npm install
        - run: cd workbase && npm test

  workbase-e2e:
      machine: true
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - *prepare_apt_repositories
        - *install_node
        - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 -y
        - run: sudo apt install libnss3 libasound2 libgconf-2-4 -y
        - *start_grakn_server
        - run: cd grakn-dist/target/grakn-core-test/ && ./graql console -f ./examples/basic-genealogy.gql -k gene
        - run: cd workbase && npm install
        - run: Xvfb :99 &
        - run: export DISPLAY=:99
        - run: cd workbase && npm run e2e

  build-workbase-linux:
      docker:
        - image: circleci/node:8.11.2
      working_directory: ~/grakn
      steps:
        - *attach_grakn_workspace
        - run: cd workbase && npm install
        - run: cd workbase && npm run build
        - persist_to_workspace:
            root: ~/grakn
            paths:
              - ./workbase/build/

  build-workbase-mac:
        macos:
            xcode: "9.0"
        working_directory: ~/grakn
        steps:
          - *attach_grakn_workspace
          - *start_grakn_server
          - run: cd grakn-dist/target/grakn-core-test/ && ./graql console -f ./examples/basic-genealogy.gql -k gene
          - run: cd workbase && npm install
          - run: cd workbase && npm run e2e
          - run: cd workbase && npm run build
          - persist_to_workspace:
              root: ~/grakn
              paths:
                - ./workbase/build/

  publish-github-draft: #TO BE COMPLETED
    docker:
      - image: cibuilds/github:0.10
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ./grakn-dist/target/ ./workbase/build

workflows:
  version: 2
  run-all-tests:
    jobs:
      - build
      - workbase-unit-tests
      - unit-it-test-1:
          requires:
            - build
      - unit-it-test-2:
          requires:
            - build
      - distribution-e2e:
          requires:
            - build
      - snb-e2e:
          requires:
            - build
      - biomed-e2e:
          requires:
            - build
      - client-nodejs-e2e:
          requires:
            - build
      - client-python-e2e:
          requires:
            - build
      - client-java-e2e:
          requires:
            - build
      - workbase-e2e:
           requires:
             - build

  build-and-deploy:
    jobs:
      - grakn-release-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-mac:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-workbase-linux:
          requires:
             - grakn-release-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-draft:
          requires:
            - build-workbase-mac
            - build-workbase-linux
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
