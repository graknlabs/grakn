from . import enums
from ..autogenerated import Session_pb2 as transaction_messages
from ..autogenerated import Concept_pb2 as concept_messages
from ..Concept import BaseTypeMapping

class RequestBuilder(object):
    """ Static methods for generating GRPC requests """

    @staticmethod
    def concept_method_req_to_tx_req(concept_id, grpc_concept_method_req):
            concept_method_req = transaction_messages.Transaction.ConceptMethod.Req()
            concept_method_req.id = concept_id
            concept_method_req.method.CopyFrom(grpc_concept_method_req)

            transaction_req = transaction_messages.Transaction.Req()
            transaction_req.conceptMethod_req.CopyFrom(concept_method_req)
            return transaction_req

    # --- Top level functionality ---
    @staticmethod
    def open_tx(keyspace, tx_type):
        open_request = transaction_messages.Transaction.Open.Req()
        open_request.keyspace = keyspace
        open_request.type = tx_type.value

        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.open_req.CopyFrom(open_request)
        return transaction_req

    @staticmethod
    def query(query, options=None):
        query_message = transaction_messages.Transaction.Query.Req()
        query_message.query = query
        if options is not None:
            if 'infer' in options:
                if options['infer']:
                    query_message.infer = transaction_messages.Transaction.Query.INFER.TRUE if options['infer'] else \
                                           transaction_messages.Transaction.Query.INFER.FALSE

        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.query_req.CopyFrom(query_message)
        return transaction_req

    @staticmethod
    def commit():
        commit_req = transaction_messages.Transaction.Commit.Req()
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.commit_req.CopyFrom(commit_req)
        return transaction_req


    @staticmethod
    def get_concept(concept_id):
        get_concept_req = transaction_messages.Transaction.GetConcept.Req()
        get_concept_req.id = concept_id
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.getConcept_req.CopyFrom(get_concept_req)
        return transaction_req
    
    @staticmethod
    def get_schema_concept(label):
        get_schema_concept_req = transaction_messages.Transaction.GetSchemaConcept.Req()
        get_schema_concept_req.label = label
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.getConcept_req.CopyFrom(get_schema_concept_req)
        return transaction_req

    @staticmethod
    def get_attributes_by_value(value, datatype: enums.DataType):
        get_attrs_req = transaction_messages.Transaction.GetAttributes.Req()
        grpc_value_object = RequestBuilder.ConceptMethod.as_value_object(value, datatype)
        get_attrs_req.value.CopyFrom(grpc_value_object)
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.getAttribute_req.CopyFrom(get_attrs_req)
        return transaction_req
        

    @staticmethod
    def put_entity_type(label):
        put_entity_type_req = transaction_messages.Transaction.PutEntityType.Req()
        put_entity_type_req.label = label
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.putEntityType_req.CopyFrom(put_entity_type_req)
        return transaction_req

    @staticmethod
    def put_relationship_type(label):
        put_relationship_type_req = transaction_messages.Transaction.PutRelationshipType.Req()
        put_relationship_type_req.label = label
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.putRelationshipType_req.CopyFrom(put_relationship_type_req)
        return transaction_req

    @staticmethod
    def put_attribute_type(label, data_type: enums.DataType):
        put_attribute_type_req = transaction_messages.Transaction.PutAttributeType.Req()
        put_attribute_type_req.label = label
        put_attribute_type_req.dataType = data_type.value # retrieve enum value
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.putAttribtueType_req.CopyFrom(put_attribute_type_req)
        return transaction_req

    @staticmethod
    def put_role(label):
        put_role_req = transaction_messages.Transaction.PutRole.Req()
        put_role_req.label = label
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.putRole_req.CopyFrom(put_role_req)
        return transaction_req

    @staticmethod
    def put_rule(label, when, then):
        put_rule_req = transaction_messages.Transaction.PutRule.Req()
        put_rule_req.label = label
        put_rule_req.when = when
        put_rule_req.then = then
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.putRule_req.CopyFrom(put_rule_req)
        return transaction_req



    # --- internal requests ---  

    @staticmethod
    def next_iter(iterator_id):
        iterate_request = transaction_messages.Transaction.Iter.Req()
        iterate_request.id = iterator_id
        
        transaction_req = transaction_messages.Transaction.Req()
        transaction_req.iterate_req.CopyFrom(iterate_request)
        return transaction_req 


    # ------ Concept Method Requests ------

    class ConceptMethod(object):
        """ Construct Concept Method requests """

        @staticmethod
        def _concept_to_grpc_concept(concept):
            """ Takes a concept from ConceptHierarcy and converts to GRPC message """
            grpc_concept = concept_messages.Concept()
            grpc_concept.id = concept.id
            base_type_name = concept.base_type
            grpc_base_type = BaseTypeMapping.name_to_grpc_base_type[base_type_name]
            grpc_concept.baseType = grpc_base_type
            return grpc_concept

        @staticmethod 
        def as_value_object(data, datatype: enums.DataType):
            msg = concept_messages.ValueObject()
            if datatype == enums.DataType.STRING:
                msg.string = data
            elif datatype == enums.DataType.BOOLEAN:
                msg.boolean = data
            elif datatype == enums.DataType.INTEGER:
                msg.integer = data
            elif datatype == enums.DataType.LONG:
                msg.long = data
            elif datatype == enums.DataType.FLOAT:
                msg.float = data
            elif datatype == enums.DataType.DOUBLE:
                msg.double = data
            elif datatype == enums.DataType.DATE:
                msg.date = data
            else:
                # TODO specialize exception
                raise Exception("Unknown attribute datatype: {}".format(datatype))
            return msg



        class SchemaConcept(object):
            """ Generates SchemaConcept method messages """
            
            @staticmethod
            def get_label():
                get_schema_label_req = concept_messages.SchemaConcept.GetLabel.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_getLabel_req.CopyFrom(get_schema_label_req)
                return concept_method_req
            
            @staticmethod
            def set_label(label):
                set_schema_label_req = concept_messages.SchemaConcept.SetLabel.Req()
                set_schema_label_req.label = label
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_setLabel_req.CopyFrom(set_schema_label_req)
                return concept_method_req
            
            @staticmethod
            def is_implicit():
                is_implicit_req = concept_messages.SchemaConcept.IsImplicit.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_isImplicit_req.CopyFrom(is_implicit_req)
                return concept_method_req

            @staticmethod
            def get_sup():
                get_sup_req = concept_messages.SchemaConcept.GetSup.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_getSup_req.CopyFrom(get_sup_req)
                return concept_method_req

            @staticmethod
            def set_sup(concept): 
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(concept)
                set_sup_req = concept_messages.SchemaConcept.SetSup.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_setSup_req.CopyFrom(set_sup_req)
                return concept_method_req

            @staticmethod
            def subs():
                subs_req = concept_messages.SchemaConcept.Subs.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_subs_req.CopyFrom(subs_req)
                return concept_method_req

            @staticmethod
            def sups():
                sups_req = concept_messages.SchemaConcept.Sups.Req()
                concept_method_req = concept_messages.SchemaConcept.Req()
                concept_method_req.schemaConcept_sups_req.CopyFrom(sups_req)
                return concept_method_req



        class Rule(object):
            """ Generates Rule method messages """

            @staticmethod
            def when():
                when_req = concept_messages.Rule.When.Req()
                concept_method_req = concept_messages.Rule.Req()
                concept_method_req.rule_when_req.CopyFrom(when_req)
                return concept_method_req

            @staticmethod
            def then():
                then_req = concept_messages.Rule.Then.Req()
                concept_method_req = concept_messages.Rule.Req()
                concept_method_req.rule_then_req.CopyFrom(then_req)
                return concept_method_req

        class Role(object):
            """ Generates Role method messages """

            @staticmethod
            def relations():
                relations_req = concept_messages.Role.Relations.Req()
                concept_method_req = concept_messages.Role.Req()
                concept_method_req.role_relations_req.CopyFrom(relations_req)
                return concept_method_req

            @staticmethod
            def players():
                players_req = concept_messages.Role.Players.Req()
                concept_method_req = concept_messages.Role.Req()
                concept_method_req.role_players_req.CopyFrom(players_req)
                return concept_method_req

            

        class Type(object):
            """ Generates Type method messages """

            @staticmethod
            def is_abstract():
                is_abstract_req = concept_messages.Type.IsAbstract.Req()
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_isAbstract_req.CopyFrom(is_abstract_req)
                return concept_method_req

            @staticmethod
            def set_abstract(abstract):
                set_abstract_req = concept_messages.Type.SetAbstract.Req()
                assert type(abstract) == bool
                set_abstract_req.abstract = abstract
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_setAbstract_req.CopyFrom(set_abstract_req)
                return concept_method_req

            @staticmethod
            def type_instances():
                type_instances_req = concept_messages.Type.Instances.Req()
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_instances_req.CopyFrom(type_instances_req)
                return concept_method_req

            @staticmethod
            def keys():
                type_keys_req = concept_messages.Type.Keys.Req()
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_keys_req.CopyFrom(type_keys_req)
                return concept_method_req

            @staticmethod
            def attributes():
                type_attributes_req = concept_messages.Type.Attributes.Req()
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_attributes_req.CopyFrom(type_attributes_req)
                return concept_method_req
                
            @staticmethod
            def has(attribute_type_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(attribute_type_concept)
                has_req = concept_messages.Type.Has.Req()
                has_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_has_req.CopyFrom(has_req)
                return concept_method_req
            
            @staticmethod
            def unhas(attribute_type_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(attribute_type_concept)
                unhas_req = concept_messages.Type.Unhas.Req()
                unhas_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_unhas_req.CopyFrom(unhas_req)
                return concept_method_req

            @staticmethod
            def key(attribute_type_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(attribute_type_concept)
                key_req = concept_messages.Type.Key.Req()
                key_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_has_req.CopyFrom(key_req)
                return concept_method_req

            @staticmethod
            def unkey(attribute_type_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(attribute_type_concept)
                unkey_req = concept_messages.Type.Unkey.Req()
                unkey_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_has_req.CopyFrom(unkey_req)
                return concept_method_req

            @staticmethod
            def playing():
                playing_req = concept_messages.Type.Playing.Req()
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_playing_req.CopyFrom(playing_req)
                return concept_method_req

            @staticmethod
            def plays( role_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(role_concept)
                plays_req = concept_messages.Type.Plays.Req()
                plays_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_has_req.CopyFrom(plays_req)
                return concept_method_req

            @staticmethod
            def unplays(role_concept):
                grpc_concept = RequestBuilder.ConceptMethod._concept_to_grpc_concept(role_concept)
                unplays_req = concept_messages.Type.Unplays.Req()
                unplays_req.attributeType.CopyFrom(grpc_concept)
                concept_method_req = concept_messages.Type.Req()
                concept_method_req.type_has_req.CopyFrom(unplays_req)

        
        # TODO
        # EntityType
        # RelationType
        # AttributeType
        # Thing
        # Relation
        # Attribute
        # Entity -- empty, not required
