from ..autogenerated import Session_pb2 as messages

class RequestBuilder(object):
    """ Static methods for generating GRPC requests """

    def to_concept_method_request(self, concept_id, method_req):
        concept_method_req = messages.Transaction.ConceptMethod.Req()
        concept_method_req.id = concept_id
        concept_method_req.method.CopyFrom(method_req)

        transaction_req = messages.Transaction.Req()
        transaction_req.conceptMethod_req.CopyFrom(concept_method_req)

        return transaction_req


    # --- Top level, basic functionality ---
    def open_tx(keyspace, tx_type):
        open_request = messages.Transaction.Open.Req()
        open_request.keyspace = keyspace
        open_request.type = tx_type

        transaction_req = messages.Transaction.Req()
        transaction_req.open_req.CopyFrom(open_request)
        return transaction_req

    def query(query, options=None):
        query_message = messages.Transaction.Query.Req()
        query_message.query = query
        if options is not None:
            if 'infer' in options:
                if options['infer']:
                    query_message.infer = messages.Transaction.Query.INFER.TRUE if options['infer'] else \
                                           messages.Transaction.Query.INFER.FALSE

        transaction_req = messages.Transaction.Req()
        transaction_req.query_req.CopyFrom(query_message)
        return transaction_req



        

