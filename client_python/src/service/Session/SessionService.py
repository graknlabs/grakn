import queue
import grpc
from typing import Type

from ... import Grakn
from .TransactionService import TransactionService

from .autogenerated.Session_pb2_grpc import SessionServiceStub


class Communicator(object):
    """ An iterator and interface for GRPC stream """

    def __init__(self, grpc_stream_constructor):
        self._deque = queue.deque()
        self._response_iterator = grpc_stream_constructor(self)

    def _add_request(self, request):
        self._deque.append(request)

    def __next__(self):
        next_item = self._deque.popLeft()
        if next_item is None:
            raise StopIteration()
        return self._deque.popLeft()

    def __iter__(self):
        return self

    def send(self, request):
        self._add_request(request)
        return next(self._response_iterator)

    def close(self):
        self._deque.clear()
        self._deque.append(None)

    





class SessionService(object):
    """ A lower layer Session that is used to abstract away GRPC details"""

    def __init__(self, uri: str, keyspace: str):
        self.keyspace = keyspace
        self.channel = grpc.insecure_channel(uri) 
        self.stub = SessionServiceStub(self.channel)


    def transaction(self,  tx_type) -> TransactionService:
        """ Abstract away use of GRPC into a tx_service """
        tx_service = TransactionService(self.keyspace, tx_type, Communicator(self.stub.transaction))
        return tx_service

    def close(self):
        self.channel.close()
        
    
