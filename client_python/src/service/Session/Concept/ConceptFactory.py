
from ..autogenerated import Concept_pb2 as ConceptMessages 
from .ConceptHierarchy import EntityType, RelationshipType, AttributeType, Role, Rule, Entity, Relationship, Attribute, Type

# base type constants
CONCEPTS = META_TYPE, ATTRIBUTE_TYPE, RELATIONSHIP_TYPE, ENTITY_TYPE, ENTITY, ATTRIBUTE, RELATIONSHIP, ROLE, RULE = \
    "META_TYPE", "ATTRIBUTE_TYPE", "RELATIONSHIP_TYPE", "ENTITY_TYPE", "ENTITY", "ATTRIBUTE", "RELATIONSHIP", "ROLE", "RULE"

"""
NOTE: the string META_TYPE is the name of the programmatic type of
Thing, Entity, Attribute, Relation IN GRPC. In the original Java server implementation,
these have the type TYPE, but due to bad naming at some point, GRPC
says the base_type of them is META_TYPE. Thus, there will never be
any concepts with base_type TYPE, only META_TYPE on GRPC-connected clients.
To match the server class hierarchy, I here instantiate TYPE objects rather than
META_TYPE, and when the time comes we will rename META_TYPE to TYPE on GRPC connected
clients too.
"""

class ConceptFactory(object):
    def __init__(self, tx_service):
        self.tx_service = tx_service
        
        # build up the mappings between GRPC enum
        # the CONCEPTS above
        # and the class hierarchy below
        grpc_base_types = ConceptMessages.Concept.BASE_TYPE
        self.name_to_object = {
            META_TYPE: Type,
            ENTITY_TYPE: EntityType,
            RELATIONSHIP_TYPE: RelationshipType,
            ATTRIBUTE_TYPE: AttributeType,
            ROLE: Role,
            RULE: Rule,
            ENTITY: Entity,
            RELATIONSHIP: Relationship,
            ATTRIBUTE: Attribute
        }

        self.grpc_base_type_to_name = {
            grpc_base_types.Value("META_TYPE"): META_TYPE,
            grpc_base_types.Value("ENTITY_TYPE"): ENTITY_TYPE,
            grpc_base_types.Value("RELATION_TYPE"): RELATIONSHIP_TYPE,
            grpc_base_types.Value("ATTRIBUTE_TYPE"): ATTRIBUTE_TYPE,
            grpc_base_types.Value("ROLE"): ROLE,
            grpc_base_types.Value("RULE"): RULE,
            grpc_base_types.Value("ENTITY"): ENTITY,
            grpc_base_types.Value("RELATION"): RELATIONSHIP,
            grpc_base_types.Value("ATTRIBUTE"): ATTRIBUTE 
        }


    def create_concept(self, grpc_concept):

        concept_id = grpc_concept.id
        base_type = grpc_concept.baseType
    
        try:
            concept_name = self.grpc_base_type_to_name[base_type]
            concept_class = self.name_to_object[concept_name]
        except KeyError as ke:
            raise ke

        return concept_class(concept_id, concept_name, self.tx_service)
