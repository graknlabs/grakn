#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

exports_files(["requirements.txt"])

load("@org_pubref_rules_proto//python:compile.bzl", "python_grpc_compile")
load(
  "@io_bazel_rules_python//python:python.bzl",
  "py_binary", "py_library", "py_test",
)
load("@python_grakn_deps//:requirements.bzl", "requirement")
load("//client_python:lib.bzl", "grakn_py_merge_sourcetrees")

sh_binary(
	name = "generate_protos",
	srcs = ["generate_protos.sh"]
)

genrule(
    name = "keyspace_proto_gen",
    srcs = [
        "//protocol/keyspace:Keyspace.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "grakn/service/Keyspace/autogenerated/Keyspace.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "concept_proto_gen",
    srcs = [
        "//protocol/session:Concept.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "grakn/service/Session/autogenerated/Concept.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "answer_proto_gen",
    srcs = [
        "//protocol/session:Answer.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "grakn/service/Session/autogenerated/Answer.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "session_proto_gen",
    srcs = [
        "//protocol/session:Session.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "grakn/service/Session/autogenerated/Session.proto",
    ],
    tools = [":generate_protos"]
)


proto_library(
    name = "generated_protos",
    srcs = [
        ":concept_proto_gen",
        ":answer_proto_gen",
        ":session_proto_gen",
        ":keyspace_proto_gen",
    ],
)

python_grpc_compile(
    name = "generated_py_lib",
    deps = [
        ":generated_protos",
    ],
    strip_prefix = "client_python",
)

filegroup(
    name = "python_sources",
    srcs = glob([
        "grakn/__init__.py",
        "grakn/exception/*.py",
        "grakn/service/**/*.py"
    ])
)

py_binary(
    name = "grakn_merge_sourcetrees",
    srcs = ["grakn_merge_sourcetrees.py"]
)

grakn_py_merge_sourcetrees(
    name = "dist",
    py_src = ":python_sources",
    proto_src = ":generated_py_lib",
)

py_library(
    name = "pypi_grpcio",
    deps = [
      requirement("grpcio")
    ]
)

py_library(
    name = "pypi_protobuf",
    deps = [
      requirement("protobuf")
    ]
)

py_library(
    name = "pypi_dependencies",
    deps = [
        ":pypi_grpcio",
        ":pypi_protobuf"
    ]
)


py_test(
    name = "test_concept",
    srcs = ["tests/integration/test_concept.py"],
    data = [":dist"],
    imports = ["dist.zip"],
    deps = [
        ":pypi_dependencies"
    ]
)

py_test(
    name = "test_grakn",
    srcs = ["tests/integration/test_grakn.py"],
    data = [":dist"],
    imports = ["dist.zip"],
    deps = [
        ":pypi_dependencies"
    ]
)

py_test(
    name = "test_keyspace",
    srcs = ["tests/integration/test_keyspace.py"],
    data = [":dist"],
    imports = ["dist.zip"],
    deps = [
        ":pypi_dependencies"
    ]
)

test_suite(
    name = "integration_tests",
    tests = [
        ":test_concept",
        ":test_grakn",
        ":test_keyspace"
    ]
)
