syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "SessionProto";

import "Concept.proto";
import "Iterator.proto";
import "ConceptMethod.proto";

service Session {
    // Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
    // When the call is completed, the transaction will always be closed, with or without a `Commit` message.
    rpc transaction (stream Transaction.Req) returns (stream Transaction.Res);
}

message Transaction {
    message Req {
        oneof req {
            Open.Req open = 1;
            Commit.Req commit = 2;
            Query.Req query = 3;
            Next next = 4;
            Stop stop = 5;
            GetSchemaConcept.Req getSchemaConcept = 6;
            GetConcept.Req getConcept = 7;
            GetAttributes.Req getAttributes = 8;
            PutEntityType.Req putEntityType = 9;
            PutAttributeType.Req putAttributeType = 10;
            PutRelationshipType.Req putRelationshipType = 11;
            PutRole.Req putRole = 12;
            PutRule.Req putRule = 13;
            RunConceptMethod runConceptMethod = 14; // returns ConceptResponse
        }
    }
    message Res {
        oneof res {
            Open.Res open = 10;
            Commit.Res commit = 11;
            Query.Res query = 12;
            GetSchemaConcept.Res getSchemaConcept = 13;
            GetConcept.Res getConcept = 14;
            GetAttributes.Res getAttributes = 15;
            PutEntityType.Res putEntityType = 16;
            PutAttributeType.Res putAttributeType = 17;
            PutRelationshipType.Res putRelationshipType = 18;
            PutRole.Res putRole = 19;
            PutRule.Res putRule = 20;
            ConceptMethod.Res conceptResponse = 21;
            Answer answer = 1;
            Done done = 2;
            IteratorId iteratorId = 4;
            Concept concept = 5;
            RolePlayer rolePlayer = 7;
            bool noResult = 8;
        }
    }
}

message Done {} // Indicates that a request is completedk
message Null {} // Indicates that a request does not yield any result

message Open { // Opening a transaction on a keyspace, which must be the first message sent
    message Req {
        string keyspace = 1;
        int32 txType = 2;
        /* Fields ignored in the open-source version. */
        string username = 3;
        string password = 4;
    }
    message Res {}
}

message Commit { // Command to commit a transaction
    message Req {}
    message Res {}
}

message Query { // Graql query to be executed on the database
    message Req {
        string query = 1; // query string
        bool infer = 2; // If this is not present, leave at server default.
    }
    message Res {
        oneof res {
            IteratorId iteratorId = 1;
            Null null = 2;
        }
    }
}

message GetSchemaConcept {
    message Req {
        string label = 1;
    }
    message Res {
        oneof res {
            Concept concept = 1;
            Null null = 2;
        }
    }
}

message GetConcept {
    message Req {
        string id = 1;
    }
    message Res {
        oneof res {
            Concept concept = 1;
            Null null = 2;
        }
    }
}

message GetAttributes {
    message Req {
        AttributeValue value = 1;
    }
    message Res {
        IteratorId iteratorId = 1;
    }
}

message PutEntityType {
    message Req {
        string label = 1;
    }
    message Res {
        Concept concept = 1;
    }
}

message PutAttributeType {
    message Req {
        string label = 1;
        DataType dataType = 2;
    }
    message Res {
        Concept concept = 1;
    }
}

message PutRelationshipType {
    message Req {
        string label = 1;
    }
    message Res {
        Concept concept = 1;
    }
}

message PutRole {
    message Req {
        string label = 1;
    }
    message Res {
        Concept concept = 1;
    }
}

message PutRule {
    message Req {
        string label = 1;
        string when = 2;
        string then = 3;
    }
    message Res {
        Concept concept = 1;
    }
}

message RunConceptMethod { // Calling a method on a concept
    string id = 1;
    ConceptMethod.Req method = 2;
}