syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "SessionProto";

import "Concept.proto";
import "Answer.proto";

package session;

service Session {
    // Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
    // When the call is completed, the transaction will always be closed, with or without a `Commit` message.
    rpc transaction (stream Transaction.Req) returns (stream Transaction.Res);
}

message Transaction {
    message Req {
        oneof req {
            Open.Req open = 1;
            Commit.Req commit = 2;
            Query.Req query = 3;
            Iter.Req iterate = 4;
            GetSchemaConcept.Req getSchemaConcept = 6;
            GetConcept.Req getConcept = 7;
            GetAttributes.Req getAttributes = 8;
            PutEntityType.Req putEntityType = 9;
            PutAttributeType.Req putAttributeType = 10;
            PutRelationshipType.Req putRelationshipType = 11;
            PutRole.Req putRole = 12;
            PutRule.Req putRule = 13;
            ConceptMethod.Req conceptMethod = 15;
        }
    }
    message Res {
        oneof res {
            Open.Res open = 1;
            Commit.Res commit = 2;
            Query.Res query = 3;
            Iter.Res iterate = 4;
            GetSchemaConcept.Res getSchemaConcept = 5;
            GetConcept.Res getConcept = 6;
            GetAttributes.Res getAttributes = 7;
            PutEntityType.Res putEntityType = 8;
            PutAttributeType.Res putAttributeType = 9;
            PutRelationshipType.Res putRelationshipType = 10;
            PutRole.Res putRole = 11;
            PutRule.Res putRule = 12;
            ConceptMethod.Res conceptMethod = 13;
        }
    }

    message Iter {
        message Req {
            int32 id = 1;
        }
        message Res {
            oneof res {
                bool done = 1;
                Answer answer = 2;
                Concept concept = 3;
                Relation.RolePlayer rolePlayer = 4;
            }
        }
    }

    message Open {
        message Req {
            string keyspace = 1;
            int32 txType = 2;
            /* Fields ignored in the open-source version. */
            string username = 3;
            string password = 4;
        }
        message Res {}
    }

    message Commit {
        message Req {}
        message Res {}
    }

    message Query {
        message Req {
            string query = 1;
            bool infer = 2; // If this is not present, leave at server default.
        }
        message Res {
            oneof res {
                int32 iteratorId = 1;
                Null null = 2;
            }
        }
    }

    message GetSchemaConcept {
        message Req {
            string label = 1;
        }
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message GetConcept {
        message Req {
            string id = 1;
        }
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message GetAttributes {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            int32 iteratorId = 1;
        }
    }

    message PutEntityType {
        message Req {
            string label = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message PutAttributeType {
        message Req {
            string label = 1;
            AttributeType.DATA_TYPE dataType = 2;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message PutRelationshipType {
        message Req {
            string label = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message PutRole {
        message Req {
            string label = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message PutRule {
        message Req {
            string label = 1;
            string when = 2;
            string then = 3;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message ConceptMethod {
        message Req {
            string id = 1;
            Method.Req method = 2;
        }
        message Res {
            Method.Res response = 1;
        }
    }
}