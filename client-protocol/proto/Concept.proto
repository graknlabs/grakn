syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "ConceptProto";

import "Value.proto";
import "Iterator.proto";

package session;

enum BaseType {
    META_TYPE = 0; // This represents the top-level meta type only
    ENTITY_TYPE = 1;
    RELATIONSHIP_TYPE = 3;
    ATTRIBUTE_TYPE = 4;
    ENTITY = 5;
    RELATIONSHIP = 6;
    ATTRIBUTE = 7;
    ROLE = 8;
    RULE = 9;
}

message Concept {
    string id = 1;
    BaseType baseType = 2;
}

message Concepts {
    repeated Concept concepts = 1;
}

message RolePlayer {
    Concept role = 1;
    Concept player = 2;
}

message AttributeValue {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}

enum DataType {
    String = 0;
    Boolean = 1;
    Integer = 2;
    Long = 3;
    Float = 4;
    Double = 5;
    Date = 6;
}

message Answer {
    oneof answer {
        QueryAnswer queryAnswer = 1;
        ComputeAnswer computeAnswer = 2;
        string otherResult = 3;
        // otherResult is used to represent `aggregate` query results.
        // Due to the many different output formats, we are just returning them as JSON for now.
    }
}

message QueryAnswer {
    map<string, Concept> queryAnswer = 1;
}

message ComputeAnswer {
    oneof computeAnswer {
        string number = 1; // number is stored as string  to accomodate numerics of any type (int, long, float, double)
        Paths paths = 2;
        Centrality centrality = 3;
        Clusters clusters = 4;
        ClusterSizes clusterSizes = 5;
    }
}

message Paths {
    repeated ConceptIds paths = 1;
}

message Centrality {
    map<int64, ConceptIds> centrality = 1;
}

message Clusters {
    repeated ConceptIds clusters = 1;
}

message ClusterSizes {
    repeated int64 clusterSizes = 1;
}

message ConceptIds {
    repeated string ids = 1;
}

message Unit {} // Represents a message with no information

message Method {
    message Req {
        oneof req {
            // The types here are the arguments for the methods. Most are `Unit`, which indicates no arguments.
            // The return types of these methods are described in `ConceptResponse`.
            // The `returns` comment indicates what each `ConceptMethod` will return.

            // Concept
            Delete.Req delete = 1;

            // Schema concept
            IsImplicit.Req isImplicit = 2;
            GetLabel.Req getLabel = 3;
            SetLabel.Req setLabel = 4;
            GetSubConcepts.Req getSubConcepts = 5;
            GetSuperConcepts.Req getSuperConcepts = 6;
            GetDirectSuperConcept.Req getDirectSuperConcept = 7;
            SetDirectSuperConcept.Req setDirectSuperConcept = 8;

            // Rule
            Unit getWhen = 107; // returns pattern (string) or noResult (bool)
            Unit getThen = 108; // returns pattern (string) or noResult (bool)

            // Role
            Unit getRelationshipTypesThatRelateRole = 1020; // returns IteratorId of Concept
            Unit getTypesThatPlayRole = 1021; // returns IteratorId of Concept

            // Type
            bool setAbstract = 1022; // returns Unit
            Unit isAbstract = 106; // returns bool
            Unit getInstances = 1030; // returns IteratorId of Concept
            Unit getAttributeTypes = 1011; // returns IteratorId of Concept
            Unit getKeyTypes = 1012; // returns IteratorId of Concept
            Unit getRolesPlayedByType = 1029; // returns IteratorId of Concept
            Concept setAttributeType = 1025;
            Concept unsetAttributeType = 1026;
            Concept setKeyType = 1027; // returns Unit
            Concept unsetKeyType = 1028; // returns Unit
            Concept setRolePlayedByType = 1023; // returns Unit
            Concept unsetRolePlayedByType = 1024; // returns Unit

            // Entity type
            Unit addEntity = 1034; // returns Concept

            // Relationship type
            Unit getRelatedRoles = 1036; // returns IteratorId of Concept
            Concept setRelatedRole = 1037; // returns Unit
            Concept unsetRelatedRole = 1038; // returns Unit

            // Attribute type
            string setRegex = 1031; // returns Unit
            Unit getRegex = 109; // returns regex (string)
            Unit getDataTypeOfAttribute = 1054; // returns DataType
            Unit getDataTypeOfAttributeType = 102; // returns DataType or noResult (bool)
            AttributeValue getAttribute = 1033; // returns Concept or noResult
            AttributeValue putAttribute = 1032; // returns Concept

            // Thing
            Unit isInferred = 105; // returns bool
            Unit getKeys = 1042; // returns IteratorId of Concept
            Unit getAttributes = 1041; // returns IteratorId of Concept
            Unit getRelationships = 1039; // returns IteratorId of Concept
            Unit getRolesPlayedByThing = 1040; // returns IteratorId of Concept
            Unit getDirectType = 1013; // returns Concept
            Concept setAttribute = 1043; // returns Unit
            Concept unsetAttribute = 1044; // returns Unit
            Concepts getKeysByTypes = 1050; // returns IteratorId of Concept
            Concepts getAttributesByTypes = 1049; // returns IteratorId of Concept
            Concepts getRelationshipsByRoles = 1048; // returns IteratorId of Concept

            // Relationship
            Unit getRolePlayers = 1010; // returns IteratorId of RolePlayer
            Unit addRelationship = 1035; // returns Concept
            RolePlayer setRolePlayer = 1046; // returns Unit
            RolePlayer unsetRolePlayer = 1015; // returns Unit
            Concepts getRolePlayersByRoles = 1051; // returns IteratorId of Concept

            // Attribute
            Unit getValue = 101; // returns AttributeValue
            Unit getOwners = 1047; // returns IteratorId of Concept
        }
    }
    message Res {
        oneof res {
            Delete.Res delete = 1;
            IsImplicit.Res isImplicit = 2;
            GetLabel.Res getLabel = 3;
            SetLabel.Res setLabel = 4;
            GetSubConcepts.Res getSubConcepts = 5;
            GetSuperConcepts.Res getSuperConcepts = 6;
            GetDirectSuperConcept.Res getDirectSuperConcept = 7;
            SetDirectSuperConcept.Res setDirectSuperConcept = 8;



            bool noResult = 101;
            bool isAbstract = 102;
            bool isInferred = 104;
            string label = 105;
            string pattern = 106;
            string regex = 107;
            Unit unit = 108;
            IteratorId iteratorId = 109;
            Concept concept = 110;
            AttributeValue attributeValue = 111;
            DataType dataType = 112;
        }
    }
}

message Delete {
    message Req {}
    message Res {}
}

message GetLabel {
    message Req {}
    message Res {
        string label = 1;
    }
}

message SetLabel {
    message Req {
        string label = 1;
    }
    message Res {}
}

message IsImplicit {
    message Req{}
    message Res{
        bool implicit = 1;
    }
}

message GetSubConcepts {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetSuperConcepts {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetDirectSuperConcept {
    message Req {}
    message Res {
        oneof res {
            Concept concept = 1;
            Null null = 2;
        }
    }
}

message SetDirectSuperConcept {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}