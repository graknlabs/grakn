syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "ConceptProto";

import "Iterator.proto";

package session;

message Method {
    message Req {
        oneof req {
            // Concept methods
            Concept.Delete.Req delete = 1;

            // SchemaConcept methods
            SchemaConcept.IsImplicit.Req isImplicit = 2;
            SchemaConcept.GetLabel.Req getLabel = 3;
            SchemaConcept.SetLabel.Req setLabel = 4;
            SchemaConcept.GetSup.Req getSup = 5;
            SchemaConcept.SetSup.Req setSup = 6;
            SchemaConcept.Sups.Req sups = 7;
            SchemaConcept.Subs.Req subs = 8;

            // Rule methods
            Rule.When.Req when = 9;
            Rule.Then.Req then = 10;

            // Role methods
            Role.Relations.Req relations = 11;
            Role.Players.Req players = 12;

            // Type methods
            IsAbstract.Req isAbstract = 13;
            SetAbstract.Req setAbstract = 14;
            GetInstances.Req getInstances = 15;
            GetAttributeTypes.Req getAttributeTypes = 16;
            GetKeyTypes.Req getKeyTypes = 17;
            GetRolesPlayedByType.Req getRolesPlayedByType = 18;
            SetAttributeType.Req setAttributeType = 19;
            UnsetAttributeType.Req unsetAttributeType = 20;
            SetKeyType.Req setKeyType = 21;
            UnsetKeyType.Req unsetKeyType = 22;
            SetRolePlayedByType.Req setRolePlayedByType = 23;
            UnsetRolePlayedByType.Req unsetRolePlayedByType = 24;

            // EntityType methods
            EntityType.Create.Req createEntity = 25;

            // RelationshipType methods
            RelationType.Create.Req createRelation = 26;
            RelationType.Roles.Req roles = 27;
            RelationType.Relates.Req relates = 28;
            RelationType.Unrelate.Req unrelate = 29;

            // AttributeType methods
            AttributeType.Create.Req createAttribute = 30;
            AttributeType.Attribute.Req attribute = 31;
            AttributeType.DataType.Req dataType = 32;
            AttributeType.GetRegex.Req getRegex = 33;
            AttributeType.SetRegex.Req setRegex = 34;

            // Thing methods
            IsInferred.Req isInferred = 35;
            GetDirectType.Req getDirectType = 36;
            GetKeys.Req getKeys = 37;
            GetKeysByTypes.Req getKeysByTypes = 38;
            GetAttributesForAnyType.Req getAttributesForAnyType = 39;
            GetAttributesByTypes.Req getAttributesByTypes = 40;
            GetRelationships.Req getRelationships = 41;
            GetRelationshipsByRoles.Req getRelationshipsByRoles = 42;
            GetRolesPlayedByThing.Req getRolesPlayedByThing = 43;
            SetAttributeRelationship.Req setAttributeRelationship = 44;
            UnsetAttributeRelationship.Req unsetAttributeRelationship = 45;

            // Relationship methods
            Relation.RolePlayersMap.Req rolePlayersMap = 46;
            Relation.RolePlayers.Req rolePlayers = 47;
            Relation.Assign.Req assign = 48;
            Relation.Unassign.Req unassign = 49;

            // Attribute methods
            Attribute.Value.Req value = 50;
            Attribute.Owners.Req owners = 51;
        }
    }
    message Res {
        oneof res {
            // Concept methods
            Concept.Delete.Res delete = 1;

            // SchemaConcept methods
            SchemaConcept.IsImplicit.Res isImplicit = 2;
            SchemaConcept.GetLabel.Res getLabel = 3;
            SchemaConcept.SetLabel.Res setLabel = 4;
            SchemaConcept.GetSup.Res getSup = 5;
            SchemaConcept.SetSup.Res setSup = 6;
            SchemaConcept.Sups.Res sups = 7;
            SchemaConcept.Subs.Res subs = 8;

            // Rule methods
            Rule.When.Res when = 9;
            Rule.Then.Res then = 10;

            // Role methods
            Role.Relations.Res relations = 11;
            Role.Players.Res players = 12;

            // Type methods
            IsAbstract.Res isAbstract = 13;
            SetAbstract.Res setAbstract = 14;
            GetInstances.Res getInstances = 15;
            GetAttributeTypes.Res getAttributeTypes = 16;
            GetKeyTypes.Res getKeyTypes = 17;
            GetRolesPlayedByType.Res getRolesPlayedByType = 18;
            SetAttributeType.Res setAttributeType = 19;
            UnsetAttributeType.Res unsetAttributeType = 20;
            SetKeyType.Res setKeyType = 21;
            UnsetKeyType.Res unsetKeyType = 22;
            SetRolePlayedByType.Res setRolePlayedByType = 23;
            UnsetRolePlayedByType.Res unsetRolePlayedByType = 24;

            // EntityType methods
            EntityType.Create.Res createEntity = 25;

            // Relationship type
            RelationType.Create.Res createRelation = 26;
            RelationType.Roles.Res roles = 27;
            RelationType.Relates.Res relates = 28;
            RelationType.Unrelate.Res unrelate = 29;

            // Attribute type
            AttributeType.Create.Res createAttribute = 30;
            AttributeType.Attribute.Res attribute = 31;
            AttributeType.DataType.Res dataType = 32;
            AttributeType.GetRegex.Res getRegex = 33;
            AttributeType.SetRegex.Res setRegex = 34;

            // Thing methods
            IsInferred.Res isInferred = 35;
            GetDirectType.Res getDirectType = 36;
            GetKeys.Res getKeys = 37;
            GetKeysByTypes.Res getKeysByTypes = 38;
            GetAttributesForAnyType.Res getAttributesForAnyType = 39;
            GetAttributesByTypes.Res getAttributesByTypes = 40;
            GetRelationships.Res getRelationships = 41;
            GetRelationshipsByRoles.Res getRelationshipsByRoles = 42;
            GetRolesPlayedByThing.Res getRolesPlayedByThing = 43;
            SetAttributeRelationship.Res setAttributeRelationship = 44;
            UnsetAttributeRelationship.Res unsetAttributeRelationship = 45;

            // Relationship methods
            Relation.RolePlayersMap.Res rolePlayersMap = 46;
            Relation.RolePlayers.Res rolePlayers = 47;
            Relation.Assign.Res assign = 48;
            Relation.Unassign.Res unassign = 49;

            // Attribute methods
            Attribute.Value.Res value = 50;
            Attribute.Owners.Res owners = 51;
        }
    }
}

message Null {} // Indicates that a request does not yield any result

// Concept methods

message Concept {
    string id = 1;
    BASE_TYPE baseType = 2;

    enum BASE_TYPE {
        META_TYPE = 0; // This represents the top-level meta type only
        ENTITY_TYPE = 1;
        RELATIONSHIP_TYPE = 3;
        ATTRIBUTE_TYPE = 4;
        ENTITY = 5;
        RELATIONSHIP = 6;
        ATTRIBUTE = 7;
        ROLE = 8;
        RULE = 9;
    }

    message Delete {
        message Req {}
        message Res {}
    }
}

// SchemaConcept methods

message SchemaConcept {

    message GetLabel {
        message Req {}
        message Res {
            string label = 1;
        }
    }

    message SetLabel {
        message Req {
            string label = 1;
        }
        message Res {}
    }

    message IsImplicit {
        message Req{}
        message Res{
            bool implicit = 1;
        }
    }

    message Subs {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Sups {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message GetSup {
        message Req {}
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message SetSup {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// Rule methods

message Rule {

    message When {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2;
            }
        }
    }

    message Then {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2;
            }
        }
    }
}


// Role methods

message Role {

    message Relations {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Players {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }
}


// Type methods

message IsAbstract {
    message Req {}
    message Res {
        bool abstract = 1;
    }
}

message SetAbstract {
    message Req {
        bool abstract = 1;
    }
    message Res {}
}

message GetInstances {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetAttributeTypes {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetKeyTypes {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetRolesPlayedByType {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message SetAttributeType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}

message UnsetAttributeType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}

message SetKeyType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}

message UnsetKeyType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}

message SetRolePlayedByType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}

message UnsetRolePlayedByType {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}


// EntityType methods

message EntityType {

    message Create {
        message Req {}
        message Res {
            Concept concept = 1;
        }
    }
}


// RelationshipType methods

message RelationType {

    message Create {
        message Req {}
        message Res {
            Concept concept = 1;
        }
    }

    message Roles {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Relates {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Unrelate {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// AttributeType methods

message AttributeType {

    enum DATA_TYPE {
        String = 0;
        Boolean = 1;
        Integer = 2;
        Long = 3;
        Float = 4;
        Double = 5;
        Date = 6;
    }

    message Create {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message Attribute {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message DataType {
        message Req {}
        message Res {
            oneof res {
                DATA_TYPE dataType = 1;
                Null null = 2;
            }
        }
    }

    message GetRegex {
        message Req {}
        message Res {
            string regex = 1;
        }
    }

    message SetRegex {
        message Req {
            string regex = 1;
        }
        message Res {}
    }
}


// Thing methods

message IsInferred {
    message Req {}
    message Res {
        bool inferred = 1;
    }
}

message GetDirectType {
    message Req {}
    message Res {
        Concept concept = 1;
    }
}

message GetKeys {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetKeysByTypes {
    message Req {
        repeated Concept concepts = 1;
    }
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetAttributesForAnyType {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetAttributesByTypes {
    message Req {
        repeated Concept concepts = 1;
    }
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetRelationships {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetRelationshipsByRoles {
    message Req {
        repeated Concept concepts = 1;
    }
    message Res {
        IteratorId iteratorId = 1;
    }
}

message GetRolesPlayedByThing {
    message Req {}
    message Res {
        IteratorId iteratorId = 1;
    }
}

message SetAttributeRelationship {
    message Req {
        Concept concept = 1;
    }
    message Res {
        Concept concept = 1;
    }
}

message UnsetAttributeRelationship {
    message Req {
        Concept concept = 1;
    }
    message Res {}
}


// Relationship methods

message Relation {

    message RolePlayer {
        Concept role = 1;
        Concept player = 2;
    }

    message RolePlayersMap {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message RolePlayers {
        message Req {
            repeated Concept concepts = 1;
        }
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Assign {
        message Req {
            RolePlayer rolePlayer = 1;
        }
        message Res {}
    }

    message Unassign {
        message Req {
            RolePlayer rolePlayer = 1;
        }
        message Res {}
    }
}

// Attribute methods

message Attribute {

    message Value {
        message Req {}
        message Res {
            ValueObject value = 1;
        }
    }

    message Owners {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }
}

// Attribute Value object

message ValueObject {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}