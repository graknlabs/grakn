syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "ConceptProto";

import "Iterator.proto";

package session;

message Method {
    message Req {
        oneof req {
            // Concept methods
            Concept.Delete.Req concept_delete = 1;

            // SchemaConcept methods
            SchemaConcept.IsImplicit.Req schemaConcept_isImplicit = 2;
            SchemaConcept.GetLabel.Req schemaConcept_getLabel = 3;
            SchemaConcept.SetLabel.Req schemaConcept_setLabel = 4;
            SchemaConcept.GetSup.Req schemaConcept_getSup = 5;
            SchemaConcept.SetSup.Req schemaConcept_setSup = 6;
            SchemaConcept.Sups.Req schemaConcept_sups = 7;
            SchemaConcept.Subs.Req schemaConcept_subs = 8;

            // Rule methods
            Rule.When.Req rule_when = 9;
            Rule.Then.Req rule_then = 10;

            // Role methods
            Role.Relations.Req role_relations = 11;
            Role.Players.Req role_players = 12;

            // Type methods
            Type.Instances.Req type_instances = 13;
            Type.IsAbstract.Req type_isAbstract = 14;
            Type.SetAbstract.Req type_setAbstract = 15;
            Type.Keys.Req type_keys = 16;
            Type.Attributes.Req type_attributes = 17;
            Type.Playing.Req type_playing = 18;
            Type.Has.Req type_has = 19;
            Type.Key.Req type_key = 20;
            Type.Plays.Req type_plays = 21;
            Type.Unhas.Req type_unhas = 22;
            Type.Unkey.Req type_unkey = 23;
            Type.Unplay.Req type_unplay = 24;

            // EntityType methods
            EntityType.Create.Req entityType_create = 25;

            // RelationshipType methods
            RelationType.Create.Req relationType_create = 26;
            RelationType.Roles.Req relationType_roles = 27;
            RelationType.Relates.Req relationType_relates = 28;
            RelationType.Unrelate.Req relationType_unrelate = 29;

            // AttributeType methods
            AttributeType.Create.Req attributeType_create = 30;
            AttributeType.Attribute.Req attributeType_attribute = 31;
            AttributeType.DataType.Req attributeType_dataType = 32;
            AttributeType.GetRegex.Req attributeType_getRegex = 33;
            AttributeType.SetRegex.Req attributeType_setRegex = 34;

            // Thing methods
            Thing.Type.Req thing_type = 35;
            Thing.IsInferred.Req thing_isInferred = 36;
            Thing.Keys.Req thing_keys = 37;
            Thing.Attributes.Req thing_attributes = 38;
            Thing.Relations.Req thing_relations = 39;
            Thing.Roles.Req thing_roles = 40;
            Thing.Relhas.Req thing_relhas = 41;
            Thing.Unhas.Req thing_unhas = 42;

            // Relationship methods
            Relation.RolePlayersMap.Req relation_rolePlayersMap = 43;
            Relation.RolePlayers.Req relation_rolePlayers = 44;
            Relation.Assign.Req relation_assign = 45;
            Relation.Unassign.Req relation_unassign = 46;

            // Attribute methods
            Attribute.Value.Req attribute_value = 47;
            Attribute.Owners.Req attribute_owners = 48;
        }
    }
    message Res {
        oneof res {
            // Concept methods
            Concept.Delete.Res concept_delete = 1;

            // SchemaConcept methods
            SchemaConcept.IsImplicit.Res schemaConcept_isImplicit = 2;
            SchemaConcept.GetLabel.Res schemaConcept_getLabel = 3;
            SchemaConcept.SetLabel.Res schemaConcept_setLabel = 4;
            SchemaConcept.GetSup.Res schemaConcept_getSup = 5;
            SchemaConcept.SetSup.Res schemaConcept_setSup = 6;
            SchemaConcept.Sups.Res schemaConcept_sups = 7;
            SchemaConcept.Subs.Res schemaConcept_subs = 8;

            // Rule methods
            Rule.When.Res rule_when = 9;
            Rule.Then.Res rule_then = 10;

            // Role methods
            Role.Relations.Res role_relations = 11;
            Role.Players.Res role_players = 12;

            // Type methods
            Type.Instances.Res type_instances = 13;
            Type.IsAbstract.Res type_isAbstract = 14;
            Type.SetAbstract.Res type_setAbstract = 15;
            Type.Keys.Res type_keys = 16;
            Type.Attributes.Res type_attributes = 17;
            Type.Playing.Res type_playing = 18;
            Type.Has.Res type_has = 19;
            Type.Key.Res type_key = 20;
            Type.Plays.Res type_plays = 21;
            Type.Unhas.Res type_unhas = 22;
            Type.Unkey.Res type_unkey = 23;
            Type.Unplay.Res type_unplay = 24;

            // EntityType methods
            EntityType.Create.Res entityType_create = 25;

            // RelationshipType methods
            RelationType.Create.Res relationType_create = 26;
            RelationType.Roles.Res relationType_roles = 27;
            RelationType.Relates.Res relationType_relates = 28;
            RelationType.Unrelate.Res relationType_unrelate = 29;

            // AttributeType methods
            AttributeType.Create.Res attributeType_create = 30;
            AttributeType.Attribute.Res attributeType_attribute = 31;
            AttributeType.DataType.Res attributeType_dataType = 32;
            AttributeType.GetRegex.Res attributeType_getRegex = 33;
            AttributeType.SetRegex.Res attributeType_setRegex = 34;

            // Thing methods
            Thing.Type.Res thing_type = 35;
            Thing.IsInferred.Res thing_isInferred = 36;
            Thing.Keys.Res thing_keys = 37;
            Thing.Attributes.Res thing_attributes = 38;
            Thing.Relations.Res thing_relations = 39;
            Thing.Roles.Res thing_roles = 40;
            Thing.Relhas.Res thing_relhas = 41;
            Thing.Unhas.Res thing_unhas = 42;

            // Relationship methods
            Relation.RolePlayersMap.Res relation_rolePlayersMap = 43;
            Relation.RolePlayers.Res relation_rolePlayers = 44;
            Relation.Assign.Res relation_assign = 45;
            Relation.Unassign.Res relation_unassign = 46;

            // Attribute methods
            Attribute.Value.Res attribute_value = 47;
            Attribute.Owners.Res attribute_owners = 48;
        }
    }
}

message Null {} // Indicates that a request does not yield any result

// Concept methods

message Concept {
    string id = 1;
    BASE_TYPE baseType = 2;

    enum BASE_TYPE {
        META_TYPE = 0; // This represents the top-level meta type only
        ENTITY_TYPE = 1;
        RELATIONSHIP_TYPE = 3;
        ATTRIBUTE_TYPE = 4;
        ENTITY = 5;
        RELATIONSHIP = 6;
        ATTRIBUTE = 7;
        ROLE = 8;
        RULE = 9;
    }

    message Delete {
        message Req {}
        message Res {}
    }
}

// SchemaConcept methods

message SchemaConcept {

    message GetLabel {
        message Req {}
        message Res {
            string label = 1;
        }
    }

    message SetLabel {
        message Req {
            string label = 1;
        }
        message Res {}
    }

    message IsImplicit {
        message Req{}
        message Res{
            bool implicit = 1;
        }
    }

    message Subs {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Sups {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message GetSup {
        message Req {}
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message SetSup {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// Rule methods

message Rule {

    message When {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2;
            }
        }
    }

    message Then {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2;
            }
        }
    }
}


// Role methods

message Role {

    message Relations {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Players {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }
}


// Type methods

message Type {

    message IsAbstract {
        message Req {}
        message Res {
            bool abstract = 1;
        }
    }

    message SetAbstract {
        message Req {
            bool abstract = 1;
        }
        message Res {}
    }

    message Instances {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Attributes {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Keys {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Playing {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Has {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Unhas {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Key {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Unkey {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Plays {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Unplay {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// EntityType methods

message EntityType {

    message Create {
        message Req {}
        message Res {
            Concept concept = 1;
        }
    }
}


// RelationshipType methods

message RelationType {

    message Create {
        message Req {}
        message Res {
            Concept concept = 1;
        }
    }

    message Roles {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Relates {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }

    message Unrelate {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// AttributeType methods

message AttributeType {

    enum DATA_TYPE {
        String = 0;
        Boolean = 1;
        Integer = 2;
        Long = 3;
        Float = 4;
        Double = 5;
        Date = 6;
    }

    message Create {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message Attribute {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            oneof res {
                Concept concept = 1;
                Null null = 2;
            }
        }
    }

    message DataType {
        message Req {}
        message Res {
            oneof res {
                DATA_TYPE dataType = 1;
                Null null = 2;
            }
        }
    }

    message GetRegex {
        message Req {}
        message Res {
            string regex = 1;
        }
    }

    message SetRegex {
        message Req {
            string regex = 1;
        }
        message Res {}
    }
}


// Thing methods

message Thing {

    message IsInferred {
        message Req {}
        message Res {
            bool inferred = 1;
        }
    }

    message Type {
        message Req {}
        message Res {
            Concept concept = 1;
        }
    }

    message Keys {
        message Req {
            repeated Concept concepts = 1;
        }
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Attributes {
        message Req {
            repeated Concept concepts = 1;
        }
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Relations {
        message Req {
            repeated Concept concepts = 1;
        }
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Roles {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Relhas {
        message Req {
            Concept concept = 1;
        }
        message Res {
            Concept concept = 1;
        }
    }

    message Unhas {
        message Req {
            Concept concept = 1;
        }
        message Res {}
    }
}


// Relationship methods

message Relation {

    message RolePlayer {
        Concept role = 1;
        Concept player = 2;
    }

    message RolePlayersMap {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message RolePlayers {
        message Req {
            repeated Concept concepts = 1;
        }
        message Res {
            IteratorId iteratorId = 1;
        }
    }

    message Assign {
        message Req {
            RolePlayer rolePlayer = 1;
        }
        message Res {}
    }

    message Unassign {
        message Req {
            RolePlayer rolePlayer = 1;
        }
        message Res {}
    }
}

// Attribute methods

message Attribute {

    message Value {
        message Req {}
        message Res {
            ValueObject value = 1;
        }
    }

    message Owners {
        message Req {}
        message Res {
            IteratorId iteratorId = 1;
        }
    }
}

// Attribute Value object

message ValueObject {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}