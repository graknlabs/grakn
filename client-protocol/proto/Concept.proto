syntax = "proto3";

option java_package = "ai.grakn.rpc.proto";
option java_outer_classname = "ConceptProto";

import "Iterator.proto";

enum BaseType {
    META_TYPE = 0; // This represents the top-level meta type only
    ENTITY_TYPE = 1;
    RELATIONSHIP_TYPE = 3;
    ATTRIBUTE_TYPE = 4;
    ENTITY = 5;
    RELATIONSHIP = 6;
    ATTRIBUTE = 7;
    ROLE = 8;
    RULE = 9;
}

message Concept {
    string id = 1;
    BaseType baseType = 2;
}

message ConceptIds {
    repeated string ids = 1;
}

message Concepts {
    repeated Concept concepts = 1;
}

message RolePlayer {
    Concept role = 1;
    Concept player = 2;
}

message Unit {} // Represents a message with no information

message ConceptMethod {
    oneof method {
        // The types here are the arguments for the methods. Most are `Unit`, which indicates no arguments.
        // The return types of these methods are described in `ConceptResponse`.
        // The `returns` comment indicates what each `ConceptMethod` will return.

        // Concept
        Unit delete = 16; // returns Unit

        // Schema concept
        string setLabel = 18; // returns Unit
        Unit getLabel = 3; // returns label (string)
        Unit isImplicit = 4; // returns bool
        Unit getSubConcepts = 19; // returns IteratorId of Concept
        Unit getSuperConcepts = 53; // returns IteratorId of Concept
        Unit getDirectSuperConcept = 14; // returns Concept or noResult (bool)
        Concept setDirectSuperConcept = 17; // returns Unit

        // Rule
        Unit getWhen = 7; // returns pattern (string) or noResult (bool)
        Unit getThen = 8; // returns pattern (string) or noResult (bool)

        // Role
        Unit getRelationshipTypesThatRelateRole = 20; // returns IteratorId of Concept
        Unit getTypesThatPlayRole = 21; // returns IteratorId of Concept

        // Type
        bool setAbstract = 22; // returns Unit
        Unit isAbstract = 6; // returns bool
        Unit getInstances = 30; // returns IteratorId of Concept
        Unit getAttributeTypes = 11; // returns IteratorId of Concept
        Unit getKeyTypes = 12; // returns IteratorId of Concept
        Unit getRolesPlayedByType = 29; // returns IteratorId of Concept
        Concept setAttributeType = 25;
        Concept unsetAttributeType = 26;
        Concept setKeyType = 27; // returns Unit
        Concept unsetKeyType = 28; // returns Unit
        Concept setRolePlayedByType = 23; // returns Unit
        Concept unsetRolePlayedByType = 24; // returns Unit

        // Entity type
        Unit addEntity = 34; // returns Concept

        // Relationship type
        Unit getRelatedRoles = 36; // returns IteratorId of Concept
        Concept setRelatedRole = 37; // returns Unit
        Concept unsetRelatedRole = 38; // returns Unit

        // Attribute type
        string setRegex = 31; // returns Unit
        Unit getRegex = 9; // returns regex (string)
        Unit getDataTypeOfAttribute = 54; // returns DataType
        Unit getDataTypeOfAttributeType = 2; // returns DataType or noResult (bool)
        AttributeValue getAttribute = 33; // returns Concept or noResult
        AttributeValue putAttribute = 32; // returns Concept

        // Thing
        Unit isInferred = 5; // returns bool
        Unit getKeys = 42; // returns IteratorId of Concept
        Unit getAttributes = 41; // returns IteratorId of Concept
        Unit getRelationships = 39; // returns IteratorId of Concept
        Unit getRolesPlayedByThing = 40; // returns IteratorId of Concept
        Unit getDirectType = 13; // returns Concept
        Concept setAttribute = 43; // returns Unit
        Concept unsetAttribute = 44; // returns Unit
        Concepts getKeysByTypes = 50; // returns IteratorId of Concept
        Concepts getAttributesByTypes = 49; // returns IteratorId of Concept
        Concepts getRelationshipsByRoles = 48; // returns IteratorId of Concept

        // Relationship
        Unit getRolePlayers = 10; // returns IteratorId of RolePlayer
        Unit addRelationship = 35; // returns Concept
        RolePlayer setRolePlayer = 46; // returns Unit
        RolePlayer unsetRolePlayer = 15; // returns Unit
        Concepts getRolePlayersByRoles = 51; // returns IteratorId of Concept

        // Attribute
        Unit getValue = 1; // returns AttributeValue
        Unit getOwners = 47; // returns IteratorId of Concept
    }
}

message ConceptResponse {
    oneof response {
        bool noResult = 1;
        bool isAbstract = 2;
        bool isImplicit = 3;
        bool isInferred = 4;
        string label = 5;
        string pattern = 6;
        string regex = 7;
        Unit unit = 8;
        IteratorId iteratorId = 9;
        Concept concept = 10;
        AttributeValue attributeValue = 11;
        DataType dataType = 12;
    }
}

message AttributeValue {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}

enum DataType {
    String = 0;
    Boolean = 1;
    Integer = 2;
    Long = 3;
    Float = 4;
    Double = 5;
    Date = 6;
}
