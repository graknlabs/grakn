#!/bin/bash

#
# Grakn - A Distributed Semantic Database
# Copyright (C) 2016  Grakn Labs Limited
#
# Grakn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grakn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# <http://www.gnu.org/licenses/gpl.txt>.

# ================================================
# grakn
# this script is divided into several major parts
# global variables
# common helper functions
# storage component helper functions - storage_*
# queue component helper functions - queue_*
# grakn helper functions - grakn_*
# command line helpers - cli_*
# ================================================

# ================================================
# common helper functions
# ================================================
update_classpath_global_var() {
  # Define CLASSPATH, exclude slf4j as we use logback
  for jar in ./services/lib/*.jar; do
      if [[ $jar != *slf4j-log4j12* ]] ; then
          CLASSPATH="$CLASSPATH":"$jar"
      fi
  done

  # Add path containing grakn.properties and logback.xml
  CLASSPATH="$CLASSPATH":./conf
  CLASSPATH="$CLASSPATH":./services/grakn
}

wait_until_terminated() {
  while kill -0 "$1" 2>/dev/null; do
    echo -n "." # output some sort of "progress bar"
    sleep $WAIT_INTERVAL_S
  done
}

print_status_message() {
  if [ $1 -eq 0 ] ; then
      echo "SUCCESS"
  else
      echo "FAILED!"
  fi
}

print_failure_diagnostics() {
  echo "======== Failure Diagnostics ========"
  echo "Grakn pid = '`cat $GRAKN_PID`' (from $GRAKN_PID), '`grakn_get_pid_by_ps_ef`' (from ps -ef)"
  echo "Queue pid = '`cat $QUEUE_PID`' (from $QUEUE_PID), '`queue_get_pid_by_ps_ef`' (from ps -ef)"
  echo "Storage pid = '`cat $STORAGE_PID`' (from $STORAGE_PID)"
}

wait_until_terminated() {
  while kill -0 "$1" 2>/dev/null; do
    echo -n "." # output some sort of "progress bar"
    sleep $WAIT_INTERVAL_S
  done
}

print_status_message() {
  if [ $1 -eq 0 ] ; then
      echo "SUCCESS"
  else
      echo "FAILED!"
  fi
}

print_failure_diagnostics() {
  echo "======== Failure Diagnostics ========"
  echo "Grakn pid = '`cat $GRAKN_PID`' (from $GRAKN_PID), '`grakn_get_pid_by_ps_ef`' (from ps -ef)"
  echo "Queue pid = '`cat $QUEUE_PID`' (from $QUEUE_PID), '`queue_get_pid_by_ps_ef`' (from ps -ef)"
  echo "Storage pid = '`cat $STORAGE_PID`' (from $STORAGE_PID)"
}

# ================================================
# storage helper functions
# ================================================



storage_stop_and_wait_until_terminated() {
  echo -n "Stopping Storage..."
  storage_check_if_running_by_pidfile
  local is_storage_running=$?
  if [[ $is_storage_running -eq 0 ]]; then
    if [[ -e $STORAGE_PID ]]; then
      pid=`cat $STORAGE_PID`
      kill "$pid"
      wait_until_terminated $pid
      echo "SUCCESS"
      return 0
    else
      echo "FAILED!" # unable to find PID
      return 1
    fi
  else
    echo "NOT RUNNING"
  fi
}

storage_wipe_all_data() {
  rm -rf db/cassandra
  mkdir -p db/cassandra/data db/cassandra/commitlog db/cassandra/saved_caches
}

queue_wait_until_ready() {
  local now_s=`date '+%s'`
  local stop_s=$(( $now_s + $QUEUE_STARTUP_TIMEOUT_S ))

  while [ $now_s -le $stop_s ]; do
      echo -n "." # output some sort of "progress bar"
      queue_check_if_running_by_ps_ef
      local is_queue_running=$?
      if [ $is_queue_running -eq 0 ] ; then
          return 0
      fi
      sleep $WAIT_INTERVAL_S
      now_s=`date '+%s'`
  done

  return 1
}

queue_stop_and_wait_until_terminated() {
  echo -n "Stopping Queue..."
  queue_check_if_running_by_ps_ef
  local is_queue_running=$?
  if [[ $is_queue_running -eq 0 ]]; then
    local queue_bin=
    if [ "$(uname)" == "Darwin" ]; then
        queue_bin="redis-cli-osx"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        queue_bin="redis-cli-linux"
    fi

    local pid=`cat $QUEUE_PID`
    ./services/redis/$queue_bin shutdown
    wait_until_terminated $pid
    local status=$?
    print_status_message ${status}
  else
    echo "NOT RUNNING"
  fi

  return $status
}

queue_wipe_all_data() {
  local queue_bin=
  if [ "$(uname)" == "Darwin" ]; then
      queue_bin="redis-cli-osx"
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      queue_bin="redis-cli-linux"
  fi

  ./services/redis/$queue_bin flushall
}

# ================================================
# grakn helper functions
# ================================================
grakn_start_process() {
  local status=
  java -cp "${CLASSPATH}" -Dgrakn.dir="./services" -Dgrakn.conf="${GRAKN_CONFIG}" \
    ai.grakn.engine.Grakn > /dev/null 2>&1 &
  status=$?
  pid=`grakn_get_pid_by_ps_ef`
  echo $pid > "${GRAKN_PID}"
  return $status
}

grakn_get_pid_by_ps_ef() {
  ps -ef | grep Grakn | grep -v grep | awk '{ print $2}'
}

grakn_check_if_ready() {
  local host=`cat ./conf/grakn.properties| grep server.host | awk -F "=" '{print $2}'`
  local port=`cat ./conf/grakn.properties| grep server.port | awk -F "=" '{print $2}'`
  curl $host:$port/configuration > /dev/null 2>&1
  return $? # curl would return 0 upon a successful response or nonzero otherwise
}

grakn_wait_until_ready() {
  local now_s=`date '+%s'`
  local stop_s=$(( $now_s + $GRAKN_STARTUP_TIMEOUT_S ))

  while [ $now_s -le $stop_s ]; do
      echo -n "." # output some sort of "progress bar"
      grakn_check_if_ready
      local is_grakn_running=$?
      if [ $is_grakn_running -eq 0 ] ; then
          return 0
      fi
      sleep $WAIT_INTERVAL_S
      now_s=`date '+%s'`
  done

  return 1
}

grakn_start_and_wait_until_ready() {
  grakn_check_if_running_by_pidfile
  is_grakn_running=$?

  if [ $is_grakn_running -eq 0 ]; then
    echo "Grakn is already running"
    return 0 # grakn is already running. no need to do anything
  else
    # otherwise attempt to start
    echo -n "Starting Grakn..."
    grakn_start_process
    local exec_grakn_bin=$?

    # check grakn status and wait until ready
    local status=
    if [ $exec_grakn_bin -eq 0 ] ; then
      # exec grakn bin successful. now wait until ready
      grakn_wait_until_ready
      status=$?
    else
      # exec grakn bin failed
      status=1
    fi

    print_status_message ${status}
    return $status
  fi
}

grakn_stop_and_wait_until_terminated() {
  echo -n "Stopping Grakn..."
  local status=
  grakn_check_if_running_by_pidfile
  local is_grakn_running=$?
  if [[ $is_grakn_running -eq 0 ]]; then
    if [[ -e "$GRAKN_PID" ]]; then
      local pid=`cat "$GRAKN_PID"`
      kill "$pid"
      local status_kill=$?
      if [ $status_kill -eq 0 ]; then
        wait_until_terminated $pid
        local status_wait_until_terminated=$?
        if [ $status_wait_until_terminated -eq 0 ]; then
          rm "$GRAKN_PID"
          local status_delete_pid_after_termination=$?
          if [ $status_delete_pid_after_termination -eq 0 ]; then
            status=0
          else
            status=1 # unable to delete pid file after grakn is terminated
          fi
        else
          status=1 # wait failed for some reason
        fi
      else
        status=1 # unable to kill for some reason
      fi
    else
      status=1 # unable to find PID file
    fi
    print_status_message ${status}
    return $status
  else
    echo "NOT RUNNING"
    return 0
  fi
}

grakn_wipe_all_data() {
  rm -r ./logs
  mkdir ./logs
}

# ================================================
# command line case statement helpers
# ================================================
cli_case_grakn_server_stop_all() {
  grakn_stop_and_wait_until_terminated
  status_grakn=$?

  queue_stop_and_wait_until_terminated
  status_queue=$?

  storage_stop_and_wait_until_terminated
  status_storage=$?

  if [ $status_grakn -eq 0 ] && [ $status_queue -eq 0 ] && [ $status_storage -eq 0 ] ; then
    return 0
  else
    return 1
  fi
}

# attempt to start grakn components. if one of them fails, abort everthing
cli_case_grakn_server_start_grakn() {
  grakn_start_and_wait_until_ready
  grakn=$?
  # log
  if [ $grakn -ne 0 ] ; then
    echo "Unable to start Grakn"
  fi
  return $grakn
}

cli_case_grakn_server_start_all() {
  cli_case_grakn_server_start_storage
  local storage=$?

  cli_case_grakn_server_start_queue
  local queue=$?

  cli_case_grakn_server_start_grakn
  local grakn=$?

  local status=
  if [ $storage -ne 0 ] || [ $queue -ne 0 ] || [ $grakn -ne 0 ]; then
    status=1
  else
    status=0
  fi

  return $status
}

cli_case_grakn_server_clean() {
  storage_check_if_running_by_pidfile
  local is_storage_running=$?

  queue_check_if_running_by_ps_ef
  local is_queue_running=$?

  grakn_check_if_ready
  local is_grakn_running=$?

  if [ $is_storage_running -eq 0 ] || [ $is_queue_running -eq 0 ] || [ $is_grakn_running -eq 0 ] ; then
    echo "Grakn is still running! Please do a shutdown with 'grakn server stop' before performing a cleanup."
  else
    echo -n "Are you sure you want to delete all stored data and logs? [y/N] " >&2
    read response
    if [ "$response" != "y" -a "$response" != "Y" ]; then
        echo "Response \"$response\" did not equal \"y\" or \"Y\".  Canceling clean operation." >&2
        return 0
    fi

    echo -n "Cleaning Storage..."
    storage_wipe_all_data
    echo "SUCCESS"

    queue_start_and_wait_until_ready
    queue_wipe_all_data
    queue_stop_and_wait_until_terminated
    echo "Cleaning Queue...SUCCESS"

    echo -n "Cleaning Grakn..."
    grakn_wipe_all_data
    echo "SUCCESS"
  fi
}

cli_case_grakn_server_start() {
  # attempt to start. check if there's any failure
  # abort and terminate if so
  status=
  case "$1" in
    grakn)
      cli_case_grakn_server_start_grakn
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Grakn. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
    storage)
      cli_case_grakn_server_start_storage
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Storage. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
    *)
      cli_case_grakn_server_start_all
    ;;
  esac
}

cli_case_grakn_server_stop() {
  case $1 in
    grakn)
      grakn_stop_and_wait_until_terminated
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to stop Grakn. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
    queue)
      queue_stop_and_wait_until_terminated
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to stop Queue. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
    storage)
      storage_stop_and_wait_until_terminated
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to stop Storage. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
    *)
      cli_case_grakn_server_stop_all
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to stop Storage. Please run 'grakn server status' or check the logs located under 'logs' directory."
        print_failure_diagnostics

        exit 1
      fi
    ;;
  esac
}

# =============================================
# CTRL+C handler
# =============================================
handle_ctrl_c() {
  echo
  echo "*** Receiving SIGINT. Halting ***"
  cli_case_grakn_server_stop
  exit 1
}

# =============================================
# misc helper methods
# =============================================
print_grakn_logo() {
  # cat ASCII logo, or fail silently if it's somehow missing
  cat ./services/grakn/grakn-ascii.txt 2> /dev/null
}

# =============================================
# main routine
# =============================================

# Common global variables
WAIT_INTERVAL_S=2

# Grakn global variables
# TODO: clean up
if [ -z "${GRAKN_HOME}" ]; then
    [[ $(readlink $0) ]] && path=$(readlink $0) || path=$0
    GRAKN_HOME=$(cd "$(dirname "${path}")" && pwd -P)
fi

GRAKN_CONFIG="../conf/grakn.properties"
GRAKN_PID=/tmp/grakn.pid
GRAKN_STARTUP_TIMEOUT_S=120

# Storage global variables
STORAGE_PID=/tmp/grakn-storage.pid
STORAGE_STARTUP_TIMEOUT_S=60

# Queue global variables
QUEUE_STARTUP_TIMEOUT_S=10
QUEUE_PID=/tmp/grakn-queue.pid

pushd "$GRAKN_HOME" > /dev/null

update_classpath_global_var

# temporarily disabling trap as it's probably not needed
# trap handle_ctrl_c INT # run handle_ctrl_c when receiving CTRL+C

print_grakn_logo

case "$1" in
  server)
    case "$2" in
      start)
        cli_case_grakn_server_start $3
      ;;
      stop)
        cli_case_grakn_server_stop $3
      ;;
      status)
        java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.dist.DistApplication ${CLASSPATH} ${GRAKN_HOME} $1 $2 $3
      ;;
      clean)
        cli_case_grakn_server_clean
      ;;
      help|*)
        java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.dist.DistApplication ${CLASSPATH} ${GRAKN_HOME} $1 $2 $3
      ;;
    esac
  ;;
  version)
    java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.dist.DistApplication ${CLASSPATH} ${GRAKN_HOME} $1 $2 $3
  ;;
  *|help)
    java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.dist.DistApplication ${CLASSPATH} ${GRAKN_HOME} $1 $2 $3
  ;;
esac

popd > /dev/null
