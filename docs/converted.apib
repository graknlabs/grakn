FORMAT: 1A
HOST: http://localhost:4567

# Grakn
TODO: Add a description

# Group Root

## Unnammed Endpoint [/]

### Unnammed Endpoint [GET]

+ Response 200 (application/json)
    + Attributes (Root)




# Group Keyspaces

## Kb [/kb]

### Kb [GET]

+ Response 200 (application/json)
    + Attributes (Keyspaces)



## Kb By Keyspace [/kb/{keyspace}]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbByKeyspace [GET]

+ Response 200 (application/json)
    + Attributes (KnowledgeBase)


+ Response 404



### KbByKeyspace [PUT]
Create a keyspace. If the keyspace exists, nothing happens.

The configuration is returned. This response is the same as the response

from `/kb/configuration`.

+ Response 200 (application/json)
    + Attributes (object)


### KbByKeyspace [DELETE]
Delete a keyspace. If the keyspace doesn't exist, nothing happens.

+ Response 204




## Kb Graql By Keyspace [/kb/{keyspace}/graql{?infer,limitEmbedded,defineAllVars,multi,explain}]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbGraqlByKeyspace [POST]
Execute a Graql query and return results.
+ Parameters
    + infer (boolean, optional)

        Enable inference

    + limitEmbedded (number, optional)

        Number of embedded concepts to return

    + defineAllVars (boolean, optional)

        Define all anonymous variables in the query

    + multi (boolean, optional)

        Support multiple queries

    + explain (boolean, optional)

        Provide an explanation of how results were inferred


+ Request
    + Attributes (array[string])


+ Response 200 (application/json)
    + Attributes (array[Answer])


+ Response 400





# Group Concepts

## Kb Concept By Keyspace And Id [/kb/{keyspace}/concept/{id}]

+ Parameters
    + keyspace: `genealogy` (string, required)

    + id: `V123` (string, required)


### KbConceptByKeyspaceAndId [GET]

+ Response 200 (application/json)
    + Attributes (Concept)


+ Response 404




## Kb Type By Keyspace [/kb/{keyspace}/type]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbTypeByKeyspace [GET]

+ Response 200 (application/json)
    + Attributes (Types)



## Kb Type By Keyspace And Label [/kb/{keyspace}/type/{label}]

+ Parameters
    + keyspace: `genealogy` (string, required)

    + label: `person` (string, required)


### KbTypeByKeyspaceAndLabel [GET]

+ Response 200 (application/json)
    + Attributes (Type)


+ Response 404




## Kb Type Instance By Keyspace And Label [/kb/{keyspace}/type/{label}/instance{?limit,offset}]

+ Parameters
    + keyspace: `genealogy` (string, required)

    + label: `person` (string, required)


### KbTypeInstanceByKeyspaceAndLabel [GET]
+ Parameters
    + limit (number, optional)

    + offset (number, optional)


+ Response 200 (application/json)
    + Attributes (Instances)


+ Response 404




## Kb Role By Keyspace [/kb/{keyspace}/role]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbRoleByKeyspace [GET]

+ Response 200 (application/json)
    + Attributes (array[Role])



## Kb Role By Keyspace And Label [/kb/{keyspace}/role/{label}]

+ Parameters
    + keyspace: `genealogy` (string, required)

    + label: `wife` (string, required)


### KbRoleByKeyspaceAndLabel [GET]

+ Response 200 (application/json)
    + Attributes (Role)


+ Response 404




## Kb Rule By Keyspace [/kb/{keyspace}/rule]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbRuleByKeyspace [GET]

+ Response 200 (application/json)
    + Attributes (array[Rule])



## Kb Rule By Keyspace And Label [/kb/{keyspace}/rule/{label}]

+ Parameters
    + keyspace: `genealogy` (string, required)

    + label: `grandparent-rule` (string, required)


### KbRuleByKeyspaceAndLabel [GET]

+ Response 200 (application/json)
    + Attributes (Rule)


+ Response 404





# Group Internal

## Configuration [/configuration]

### Configuration [GET]

+ Response 200
    + Attributes (object)



## Status [/status]

### Status [GET]

+ Response 200 (application/json)
    + Attributes (StatusResponse)



## Metrics [/metrics]

### Metrics [GET]

+ Response 200
    + Attributes (string)



## Kb Commit Log By Keyspace [/kb/{keyspace}/commit_log]

+ Parameters
    + keyspace: `genealogy` (string, required)


### KbCommitLogByKeyspace [POST]

+ Request (application/json)
    + Attributes (CommitLogRequest)


+ Response 200 (application/json)
    + Attributes (CommitLogResponse)



## Task [/task]

### Task [GET]

+ Response 200 
    + Attributes (string)


### Task [POST]

+ Response 201 




## Task By Id [/task/{id}]

+ Parameters
    + id: `123` (string, required)


### TaskById [GET]

+ Response 200 
    + Attributes (string)



## Task Stop By Id [/task/{id}/stop]

+ Parameters
    + id: `123` (string, required)


### TaskStopById [PUT]

+ Response 204 





# Data Structures

## Root (object)


### Properties
+ `keyspaces` (string, required) 


## Keyspaces (object)


### Properties
+ `@id` (string, required) 
+ `keyspaces` (array[KnowledgeBase], required) 
+ `keyspace` (string, required) 


## KnowledgeBase (object)


### Properties
+ `@id` (string, required) 
+ `name` (string, optional) 
+ `types` (string, optional) 
+ `roles` (string, optional) 
+ `rules` (string, optional) 
+ `graql` (string, optional) 


## Answer (object)


### Properties
+ `x` (Concept, optional) 


## Concept (object)


### Properties
+ `relationships` (array[Relationships], required) 
+ `attributes` (array[AttributeSummary], required) 
+ `keys` (array[string], required) 
+ `@id` (string, optional) 
+ `type` (TypeSummary, optional) 
+ `value` (string, optional) 
+ `rolePlayers` (array[RolePlayers], optional) 


## Relationships (object)


### Properties
+ `role` (string, required) 
+ `relationship` (string, required) 


## AttributeSummary (object)


### Properties
+ `@id` (string, optional) 
+ `type` (TypeSummary, optional) 
+ `value` (string, optional) 


## TypeSummary (object)


### Properties
+ `@id` (string, required) 
+ `label` (string, required) 


## RolePlayers (object)


### Properties
+ `role` (string, required) 
+ `player` (string, required) 


## Types (object)


### Properties
+ `@id` (string, required) 
+ `types` (Type, required) 


## Type (object)


### Properties
+ `@id` (string, required) 
+ `label` (string, required) 
+ `abstract` (boolean, required) 
+ `implicit` (boolean, required) 
+ `plays` (array[RoleSummary], required) 
+ `attributes` (array[string], required) 
+ `keys` (array[string], required) 
+ `subs` (array[object], required) 
+ `relates` (array[string], optional) 
+ `super` (string, optional) 
+ `instances` (string, optional) 


## RoleSummary (object)


### Properties
+ `@id` (string, required) 
+ `label` (string, required) 
+ `relationships` (array[string], required) 


## Instances (object)


### Properties
+ `concepts` (array[Concept], required) 
+ `next` (string, optional) 
+ `previous` (string, optional) 


## Role (object)


### Properties
+ `implicit` (boolean, required) 
+ `rolePlayers` (array[string], required) 
+ `subs` (array[string], required) 
+ `super` (string, optional) 
+ `@id` (string, optional) 
+ `label` (string, optional) 
+ `relationships` (array[string], optional) 


## Rule (object)


### Properties
+ `@id` (string, required) 
+ `implicit` (boolean, required) 
+ `subs` (array[string], required) 
+ `label` (string, required) 
+ `when` (string, optional) 
+ `then` (string, optional) 
+ `super` (string, optional) 


## StatusResponse (object)


### Properties
+ `status` (enum[string], optional) 
    + `READY`
    + `INITIALIZING`


## CommitLogRequest (object)


### Properties
+ `types-with-new-counts` (array[TypesWithNewCounts], required) 
+ `concepts-to-fix` (object, required) 


## TypesWithNewCounts (object)


### Properties
+ `concept-id` (string, optional) 
+ `sharding-count` (number, optional) 


## CommitLogResponse (object)


### Properties
+ `postProcessingTaskId` (string, optional) 
+ `countingTaskId` (string, optional) 
+ `keyspace` (string, optional) 

